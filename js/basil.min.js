if (!window['Basil']) {
	function Basil($name, $baseUrl, $cache) {
		var _self = this;
		var _include = [];
		var _included = [];
		var _classes = [];
		var _extensions = {};
		var _isComplete = false;
		var _completeCallbacks = [];
		var _initCallbacks = [];
		var _readyCallbacks = [];
		this.name = $name || 'Basil';
		this.baseUrl = $baseUrl || '';
		this.debug = 'Out';
		this.complete = null;
		this.errors = [];
		this.cache = $cache != null ? $cache : true;
		this.tierIndex = 0;
		this.currentTier = 0;
		this.complete = function complete($function) {
			_completeCallbacks.push($function);
		};
		this.ready = function ready($function) {
			_readyCallbacks.push($function);
		};
		this.init = function init($function) {
			_initCallbacks.push($function);
		};
		this.forceComplete = function forceComplete() {
			_includeComplete();
		};
		this.flush = function flush() {
			_debug("Flushing " + _self.name + " includes.");
			_include = [];
			_included = [];
			_classes = [];
			_isComplete = false;
			_completeCallbacks = [];
			_readyCallbacks = [];
			_initCallbacks = [];
			_self.errors = [];
		};
		this.register = function register($class) {
			_classes.push($class);
		};
		this.extend = function extend($classA, $classB, $isStatic) {
			var _n = $classA.name;
			var _t,
			_c,
			_c1,
			_c2,
			_a1,
			_a2;
			_a1 = _getObjectByString($classB);
			if (typeof(_a1) == 'function') {
				_t = new _a1();
				for (var i in _t) {
					_c2 = _t[i];
					if (typeof(_c2) == 'function') {
						if ($classA[i]) {
							(function () {
								var __1 = _extend($classA[i], []);
								var __2 = _extend(_t[i], []);
								$classA[i] = function _extended_function($a1, $a2, $a3, $a4, $a5, $a6) {
									return (function _superClass() {
										this.__super__ = __2;
										return __1($a1, $a2, $a3, $a4, $a5, $a6);
									})($a1, $a2, $a3, $a4, $a5, $a6);
								};
							})();
						}
					};
				};
			} else if ($isStatic) {
				_debug("Delayed Extending " + $classA.name + " with " + $classB + '[class hasnt loaded yet]');
				_extensions[$classA.name] = $classB;
				return $classA;
			} else if (typeof(_a1) == 'object') {
				if (_a1 == undefined) {
					_debug("Static class [" + $classB + "] doesn't exist yet. Cannot be extended.");
				} else {
					var _t = _extend({}, _a1);
					_debug("Extending static class");
				}
			} else {
				_debug("Class [" + $classB + "] doesn't exist. via@" + $classA['name']);
			};
			_t = _extend($classA, _t);
			_t.name = _n;
			if (_t['setSelf'])
				_t.setSelf(_t);
			return _t;
		};
		this.create = function create($class, $params) {
			$params = $params || {};
			_self.register($class);
			if ($params['construct']) {
				$params['construct'] = typeof($params['construct']) != 'function' ? [$class, $params['construct']] : $params['construct'];
				_self.ready($params['construct']);
			};
			if ($params['init']) {
				$params['init'] = typeof($params['init']) != 'function' ? [$class, $params['init']] : $params['init'];
				_self.init($params['init']);
			};
			if ($params['extend']) {
				return _self.extend($class, $params['extend'], true);
			};
			_lastClass = $class;
			return $class;
		};
		this.include = function include() {
			var i,
			fullFile,
			file,
			noCache;
			var args = arguments;
			var tier = 0;
			if (typeof(args[args.length - 1]) == 'function') {
				_self.complete(args[args.length - 1]);
			};
			if (typeof(args[0]) == 'number') {
				tier = args[0];
			};
			for (i = 0, l = args.length; i < l; i++) {
				file = args[i];
				if (typeof(file) == 'function' || typeof(file) == 'number')
					continue;
				if (tier < _self.currentTier) {
					tier = _self.currentTier;
				};
				fullFile = _self.baseUrl + file;
				if (file.substr(0, 4) == 'http') {
					fullFile = file;
				};
				noCache = _self.cache == true ? '' : '?c=' + Math.random();
				_writeTier(tier, fullFile + noCache, _include);
				if (tier <= _self.currentTier) {
					_self.downloadScript(fullFile + noCache);
				};
			};
		};
		this.execute = function execute($params) {
			_debug("Executing: " + $params.url);
			var baseUrl = $params.url.split('/');
			baseUrl.pop();
			baseUrl = baseUrl.join('/') + '/';
			_ajax({
				contentType : 'text/javascript',
				dataType : 'script',
				url : $params.url,
				complete : function execute_complete($data) {
					if (!$data) {
						_debug("Check that you are on a correct domain and do not need proxy.");
						return;
					};
					var pattern = /this\.name[^=]+[^'"]+.([^'"]+)['"]./;
					var name = $data.responseText.match(pattern);
					name = name[1];
					_debug("Name should be: " + name);
					if (window[name]) {
						window[name].basil = new Basil(window[name].name);
						window[name].basil.baseUrl = baseUrl;
						window[name].assets = baseUrl + 'assets/';
						window[name].getAsset = function getAsset($url) {
							return window[name].assets + $url;
						};
					};
					if (window[name] && window[name].construct) {
						window[name].construct($params);
					};
				}
			});
		};
		this.downloadScript = function downloadScript($file) {
			if (_included.indexOf($file) > -1) {
				_debug("          Already Downloaded: " + $file);
				_include_COMPLETE_handler(null);
			} else {
				_debug("     Downloading: " + $file);
				_included.push($file);
				_ajax({
					contentType : 'text/javascript',
					dataType : 'script',
					url : $file,
					complete : _include_COMPLETE_handler,
					error : function ($jqXHR, $text, $error) {
						_include_ERROR_handler($file, $jqXHR, $text, $error);
					}
				});
			};
		};
		this.downloadTier = function downloadTier($index, $ref) {
			var i;
			_debug("Level " + $index + " Started: Tier " + _self.currentTier);
			if (!$ref[$index]) {
				return false;
			}
			for (i = 0, l = $ref[$index].queue.length; i < l; i++) {
				_self.downloadScript($ref[$index].queue[i]);
			};
		};
		function _writeTier($tier, $file, $ref) {
			var t = _getTier($tier, $ref);
			t.queue.push($file);
			$ref.sortOn('tier');
		};
		function _getTier($tier, $ref) {
			for (var i in $ref) {
				if ($ref[i].tier == $tier)
					return $ref[i];
			};
			return _createTier($tier, $ref);
		};
		function _getTierNumberFromLevel($level, $ref) {
			if ($ref[$level])
				return $ref[$level].tier;
			return 0;
		};
		function _createTier($level, $ref) {
			$ref.push({
				tier : $level,
				queue : [],
				complete : 0
			});
			return $ref[$ref.length - 1];
		};
		function _extend($classA, $classB) {
			for (var i in $classB) {
				if (!$classA[i])
					$classA[i] = $classB[i];
			};
			return $classA;
		};
		function _ajax($params) {
			var script,
			head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;
			script = document.createElement("script");
			script.src = $params.url;
			script.async = "async";
			script.onload = script.onreadystatechange = function (_, isAbort) {
				if (!script.readyState || /loaded|complete/.test(script.readyState)) {
					script.onload = script.onreadystatechange = null;
					if (head && script.parentNode) {
						head.removeChild(script);
					};
					script = undefined;
					if (!isAbort) {
						$params.complete();
					}
				}
			};
			head.insertBefore(script, head.firstChild);
		};
		function _printErrors() {
			var i = 0,
			l = _self.errors.length;
			_debug("");
			_debug("========================================================");
			_debug("                    " + l + " Errors found");
			_debug("========================================================");
			for (i; i < l; i++) {
				_debug(_self.errors[i]);
				_debug("--------------------------------------------------------");
			}
		};
		function _debug($message) {
			switch (_self.debug) {
			case 'Out':
				if (window['Out'])
					Out.debug(_self, $message);
				break;
			case true:
				if (window['console'])
					console.log($message);
				break;
			};
		};
		function _findClassByName($name) {
			for (var i in _classes) {
				if (_classes[i] == $name) {
					return _classes[i];
				};
			};
			return window[$name];
		};
		function _getObjectByString($str, $obj, $layer) {
			var ret = $obj || window;
			$layer = isNaN($layer) ? 0 : $layer;
			if (typeof($str) === 'string')
				$str = $str.split('.');
			ret = ret[$str[$layer]];
			if ($layer < $str.length - 1)
				ret = _getObjectByString($str, ret, $layer + 1);
			return ret;
		};
		var drInt = null;
		function _includeComplete($boolean) {
			if (_isComplete) {
				clearInterval(drInt);
				drInt = null;
				return;
			};
			if (window['___DOCUMENT_LOADED']) {
				_debug("\n FIRING Document Loaded " + drInt + "\n");
				_isComplete = true;
				clearInterval(drInt);
				drInt = null;
				_extendAndInitiate();
			} else {
				if (!$boolean)
					var script = document.createElement("script");
				script.text = "___DOCUMENT_LOADED = true;";
				document.body.appendChild(script);
				document.body.removeChild(script);
				drInt = setInterval(_includeComplete, 50, [true]);
			};
		};
		function _extendAndInitiate() {
			var i,
			ii,
			l,
			ll,
			_obj;
			___DOCUMENT_LOADED = true;
			for (i = 0, l = _readyCallbacks.length; i < l; i++) {
				if (typeof(_readyCallbacks[i]) == 'function') {
					_readyCallbacks[i]();
				} else {
					_readyCallbacks[i][0][_readyCallbacks[i][1]]();
				};
			}
			for (i in _extensions) {
				for (ii = 0, ll = _classes.length; ii < ll; ii++) {
					if (_classes[ii].name == i) {
						_obj = _getObjectByString(_classes[ii].name);
						_obj = _self.extend(_classes[ii], _extensions[i]);
					};
				};
			};
			for (i = 0, l = _initCallbacks.length; i < l; i++) {
				if (typeof(_initCallbacks[i]) == 'function') {
					_initCallbacks[i]();
				} else {
					_initCallbacks[i][0][_initCallbacks[i][1]]();
				};
			}
			for (i = 0, l = _completeCallbacks.length; i < l; i++) {
				if (typeof(_completeCallbacks[i]) == 'function') {
					_completeCallbacks[i]();
				} else {
					_completeCallbacks[i][0][_completeCallbacks[i][1]]();
				};
			}
			_debug("Classes construct/extend/init completed.");
			if (_self.errors && _self.errors.length) {
				_printErrors();
			};
		};
		function _include_COMPLETE_handler($e) {
			setTimeout(function () {
				var a = _getTier(_self.currentTier, _include);
				a.complete++;
				if (a.complete == a.queue.length) {
					_debug("Level " + _self.tierIndex + " complete. " + a.queue.length + " file(s) downloaded.");
					_self.tierIndex++;
					_self.currentTier = _getTierNumberFromLevel(_self.tierIndex, _include);
					if (_self.tierIndex >= _include.length && !_isComplete) {
						_includeComplete();
					} else {
						_self.downloadTier(_self.tierIndex, _include);
					};
				};
			}, 100);
		};
		function _include_ERROR_handler($file, $jqXHR, $text, $error) {
			_self.errors.push(["\nFile: ", $file, "\nMessage: ", $jqXHR['status'] + ' ' + $error, "\n\n"].join(''));
		};
		return this;
	};
};
if (!Array.sortOn) {
	Array.prototype.sortOn = function ($key) {
		this.sort(function (a, b) {
			return (a[$key] > b[$key]) - (a[$key] < b[$key]);
		});
	};
};
