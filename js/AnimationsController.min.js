
function AnimationsController($model) {
	var _self = this;
	var _model;
	var _demo = {};
	var _browser_tag = "";
	this.name = "AnimationsController";
	this.startAnimations = function () {
		var css_file = '' + _model.data.controller + '.css';
		if (!$('#style-' + _model.data.controller).length) {
			$.ajax({
				url : css_file,
				success : function ($css) {
					$('<style id="style-' + _model.data.controller + '">' + $css + '</style>').appendTo('head');
					cssLoaded();
				}
			});
		} else {
			cssLoaded();
		}
	}
	function cssLoaded() {
		console.log(_model.checkFeatureCompatibility());
		if (!_model.checkFeatureCompatibility()) {
			_model.featureNotSupported(['CSS3 Animations']);
			return;
		}
		var animation_data = _model.data.animation_states;
		var animation_tmp = [];
		_model.tmp_value = '';
		_demo.animation = {};
		_demo.animation.object = $('#asset-dude')[0];
		_demo.animation.current_state = 0;
		_demo.animation_states = [];
		_demo.animation.object.addEventListener('animationiteration', animationNew, false);
		_demo.animation.object.addEventListener('webkitAnimationIteration', animationNew, false);
		_demo.next_class = 'animation-jump-200';
		if (jQuery.browser.mozilla) {
			_browser_tag = "-moz-";
		}
		if (jQuery.browser.webkit) {
			_browser_tag = "-webkit-";
		}
		if (jQuery.browser.opera) {
			_browserTag = "-o-";
		}
		if (jQuery.browser.msie) {
			_browserTag = "-ms-";
		}
		$('#asset-dude .cube').each(function (index) {
			$(this).css(_browser_tag + 'animation', 'cube-' + index + ' 0.5s ease-in-out 0s infinite');
		});
		for (var i = 0; i < _model.data.controls.length; i++) {
			if (_model.data.controls[i].type === 'slider') {
				_demo.slider = _model.data.controls[i];
				break;
			}
		}
		$('#asset-dude').addClass('animation-jump-' + _demo.slider.min);
		$('#asset-hurdle').css(_browser_tag + 'animation', 'hurdle 4s linear 0s infinite');
		$('#shadows_animation_hurdle').css(_browser_tag + 'animation', 'hurdle 4s linear 0s infinite');
		var timed_selectors = [_browser_tag + 'animation', '#animations_tree_1, #shadows_animation_tree_1', '#animations_tree_2, #shadows_animation_tree_2', '#animations_tree_3, #shadows_animation_tree_3', '#animations_grass_1, #shadows_animation_shrub_1', '#animations_grass_2, #shadows_animation_shrub_2', '#animations_grass_3, #shadows_animation_shrub_3', '#animations_grass_4, #shadows_animation_shrub_4', '#animations_grass_5, #shadows_animation_shrub_5'];
		for (var i = 0; i < timed_selectors.length; i++) {
			(function (i) {
				setTimeout(function () {
					$(timed_selectors[i]).css(_browser_tag + 'animation', 'environment 8s linear 0s infinite');
				}, randomparseInt(0, 8000));
			})(i);
		}
	};
	this.init = function () {};
	this.stop = function () {
		$('#shadows_animation_hurdle').remove();
		setTimeout(function () {
			$('#shadows_animation_hurdle').remove();
		}, 8000);
		_demo = {};
		$('#demo-html').html('');
	};
	this.updateValue = function ($control) {
		if (jQuery.browser.mobile) {
			if ($control.type === 'sliderup') {
				_demo.next_class = 'animation-jump-' + $control.value;
				_model.tmp_value = 'animation-jump-' + $control.value;
			}
		} else {
			var v = ($control.object) ? $control.object.value : $control.value;
			_demo.next_class = 'animation-jump-' + v;
			_model.tmp_value = 'animation-jump-' + v;
		}
		_model.checkMasterAchievement(_model.data.controller);
	};
	function animationNew($event) {
		if (_demo.animation !== undefined) {
			if ($event.target.id === _demo.animation.object.id) {
				if (_demo.next_class !== undefined && !$('#asset-dude').hasClass(_model.tmp_value)) {
					if (_model.tmp_value !== undefined && _model.tmp_value !== '') {
						for (var i = parseInt(_demo.slider.min); i <= parseInt(_demo.slider.max); i += parseInt(_demo.slider.step)) {
							$('#asset-dude').removeClass('animation-jump-' + parseInt(i));
						}
						$('#asset-dude').addClass(_model.tmp_value);
						if (!$('#asset-hurdle').hasClass('the_hurdle')) {
							$('#asset-hurdle').hasClass('the_hurdle')
						}
						var hurdle_old = $('#asset-hurdle:first');
						var hurdle_new = hurdle_old.clone(true);
						hurdle_old.before(hurdle_new);
						hurdle_old.remove();
						var hurdle_shadow_old = $('#shadows_animation_hurdle:first');
						var hurdle_shadow_new = hurdle_shadow_old.clone(true);
						hurdle_shadow_old.before(hurdle_shadow_new);
						hurdle_shadow_old.remove();
					}
				}
			}
		}
	}
	function randomparseInt($min, $max, $digits) {
		var return_value = $min + (Math.random() * ($max - $min));
		if ($digits === undefined) {
			Math.round(return_value);
		} else {
			return_value.toFixed($digits);
		}
		return return_value;
	}
	(function () {
		_model = $model;
	})();
	return ExpressiveWeb.create(_self, {
		register : true,
		extend : 'Controller'
	});
};
