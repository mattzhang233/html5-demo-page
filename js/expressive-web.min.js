var Main = new(function () {
		var _self = this;
		var _model;
		var _canvas_view;
		var _canvas_controller;
		var _font_view;
		var _home_view;
		var _video_view;
		var _controller;
		var _nav_view;
		var featureToSwitchTo;
		var _init = false;
		var _min_width_achieved = Number.MAX_VALUE;
		var _addPeopleForMS = true;
		var _facebookShareIsLoaded = false;
		this.name = "Main";
		this.views = {};
		var _landscape_controller;
		var _demo_controller;
		var _overlay_controller;
		var _label_controller;
		var _description_controller;
		this.attach = function attach() {
			_self.views['nav'] = new views.NavView();
			_self.views['background'] = new views.BackgroundView();
			_self.views['bg-shadows'] = new views.BackgroundShadowsView();
			_self.views['sub-nav'] = new views.SubNavView();
			_self.views['footer'] = new views.FooterView();
			_self.views['tooltip'] = new views.ToolTipView();
			_self.views['main'] = new views.View();
			_self.views['main'].init($("#content"), _model, _controller);
			_self.views['main'].animateInStarted.add(_onViewAnimateInStarted_handler);
			_self.views['main'].animateInCompleted.add(_onViewAnimatInCompleted_handler);
			_self.views['main'].animateOutStarted.add(_onViewAnimateOutStarted_handler);
			_self.views['main'].animateOutCompleted.add(_onViewAnimatOutCompleted_handler);
			_self.views['background'].animateInCompleted.add(_onBackgroundAnimateInComplete);
			_self.views['bg-shadows'].animateInCompleted.add(_onBackgroundShadowsAnimateInComplete);
			_overlay_controller.updated.add(_onOverlayUpdated_handler);
			_overlay_controller.loaded.add(_onDragImageLoaded_handler);
			_landscape_controller.animateInCompleted.add(_onLandscapeAnimateInCompleted_handler);
			_demo_controller.audioEnded.add(_audioEnded_handler);
			_min_width_achieved = $(window).width();
			var hash = window.location.hash.toString().split("/");
			if (hash[1] == undefined) {
				_model.getDataForFeature(REQUEST_SCREEN);
			} else {
				_model.getDataForFeature(hash[1]);
				_initSubNav(hash[1]);
			}
			$(window).bind('hashchange', function () {
				var hash = window.location.hash.toString().split("/");
				if (!_model.ignore_hash_change) {
					if (hash[1] == undefined) {
						_model.getDataForFeature('welcome');
						if ($('#nav .selected').length) {
							$('#nav .selected').removeClass('selected');
						}
					} else {
						if (REQUEST_SCREEN !== hash[1]) {
							_model.getDataForFeature(hash[1]);
							if ($('#nav .selected').length) {
								$('#nav .selected').removeClass('selected');
								if ($('#nav-' + hash[1]).length) {
									$('#nav-' + hash[1]).addClass('selected');
								}
								if (hash[1] === 'media-queries') {
									$('#nav-selectors').addClass('selected');
								}
							}
						}
					}
				}
			});
		};
		this.detatch = function detatch() {};
		function _initSubNav($screen) {
			if (!_self.views['sub-nav'].isIn && $screen != 'welcome') {
				_self.views['sub-nav'].init($("#sub-nav"), _model, _controller);
			}
		};
		function _onViewAnimateInStarted_handler() {
			_description_controller.descriptionAnimateIn();
			_label_controller.labelAnimateIn();
		};
		function _onViewAnimatInCompleted_handler() {};
		function _onViewAnimateOutStarted_handler() {
			_overlay_controller.overlayAnimateOut();
			_label_controller.labelAnimateOut();
			_description_controller.descriptionAnimateOut();
			if (_model.data.controller == 'welcome') {
				_self.views['sub-nav'].remove();
			}
			_self.views['background'].removeBackgroundElements(_model.data.controller);
		};
		function _onViewAnimatOutCompleted_handler() {
			_self.views['background'].render(_model.data.controller);
		};
		function _onBackgroundAnimateInComplete() {
			$('body').removeClass(REQUEST_SCREEN).addClass(_model.data.controller);
			_self.views['main'].render();
			REQUEST_SCREEN = _model.data.controller;
		};
		function _onBackgroundShadowsAnimateInComplete() {};
		function _onLandscapeAnimateInCompleted_handler() {
			_demo_controller.sceneLoaded();
			_overlay_controller.overlayAnimateIn();
			_model.store.checkMainFeatures();
			if (_model.data.controller == 'web-storage') {
				_model.checkMasterAchievement(_model.data.controller);
			}
			if (_model.data.controller == 'selectors') {
				var css_file = '' + _model.data.controller + '.css';
				if (!$('#style-' + _model.data.controller).length) {
					$.ajax({
						url : css_file,
						success : function ($css) {
							$('<style id="style-' + _model.data.controller + '">' + $css + '</style>').appendTo('head');
						}
					});
				}
			}
			if ((!jQuery.browser.mobile && !_model.testMobile) && _addPeopleForMS && _model.data.controller == 'audio') {
				_people_controller.addPeople();
			} else {
				_self.views['bg-shadows'].render(_model.data.controller);
			}
			_self.views['tooltip'].render();
			if (!_self.views['nav'].isIn) {
				_self.views['nav'].init($("#nav"), _model, _controller);
			}
			if (!_facebookShareIsLoaded) {
				$('#links .fb').html('<iframe src="http://www.facebook.com/plugins/like.php?app_id=225473734152049&amp;href=theexpressiveweb.com&amp;send=false&amp;layout=button_count&amp;width=450&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height:21px;" allowTransparency="true"></iframe>');
				_facebookShareIsLoaded = true;
			}
		};
		function _onOverlayUpdated_handler($control) {
			if (REQUEST_SCREEN == 'audio' && !jQuery.browser.mobile && _addPeopleForMS) {
				_people_controller.updateValue($control);
			}
			_demo_controller.updated($control);
		};
		function _onDragImageLoaded_handler($id) {
			if (REQUEST_SCREEN == 'drag') {
				_model.addDragObject($id);
			}
		};
		function _dataLoaded_handler() {
			_updateShareLinks();
			if (!_init) {
				_init = true;
				_onViewAnimatOutCompleted_handler();
				_self.views['footer'].init($("#footer"), _model, _controller);
				_initSubNav(REQUEST_SCREEN);
				return;
			}
			if (!_self.views['sub-nav'].isIn) {
				_self.views['sub-nav'].init($("#sub-nav"), _model, _controller);
				$('#expressive-web-intro').fadeOut('fast');
			}
			_self.views['bg-shadows'].removeBackgroundElements(_model.data.controller);
			if ((!jQuery.browser.mobile && !_model.testMobile) && _addPeopleForMS && REQUEST_SCREEN == 'audio') {
				_people_controller.removePeople();
			}
			_landscape_controller.animateOut();
			_demo_controller.demoStop();
			_self.views['tooltip'].remove();
			_self.views['main'].remove();
		};
		function _featureNotSupported_handler($name_list) {
			_demo_controller.featureNotSupported($name_list);
		};
		function _onLandscapeAnimateOutCompleted_handler() {
			_demo_controller.removeLegacy();
			_self.views['main'].animateOut();
		};
		function _onDescriptionAnimateInCompleted_handler() {
			_landscape_controller.sceneLoad();
		};
		function _updateShareLinks() {
			$("#links .email a").attr('href', _model.data.email);
			$("#links .twitter a").attr('href', _model.data.twitter);
		};
		function _onAchievementObtained_handler($name) {
			var msg = '';
			var name = '';
			var title = '';
			switch ($name) {
			case 'ALL_FEATURES_VIEWED':
				msg = 'Looks like you know how to get around.';
				title = 'All Features';
				break;
			case 'FIRST_FEATURE':
				msg = 'One feature down, several more to go.';
				title = 'First Feature';
				break;
			case 'SESSION_TIME':
				msg = 'Step away from the keyboard.';
				title = 'Session Time';
				break;
			case 'SHARED':
				msg = 'It\'s not spam, if you meant to send it.';
				title = 'Shared';
				break;
			case 'BURGER':
				msg = 'Would you like a side of fries with that?';
				title = 'Burger';
				break;
			case 'MASTER_fonts':
				msg = 'Took control of web typography on the @font-face feature page.';
				title = 'Fonts';
				break;
			case 'MASTER_animations':
				msg = 'You ran for the gold on the CSS3 Animations feature page!';
				title = 'Animations';
				break;
			case 'MASTER_gradients':
				msg = 'You got your daily jolt with the with the CSS3 Gradients feature.';
				title = 'Gradients';
				break;
			case 'MASTER_shadows':
				msg = 'You took control of the sun on the CSS Text / Box Shadow feature page.';
				title = 'Shadows';
				break;
			case 'MASTER_transforms':
				msg = 'You blew it all up on the CSS3 Transforms feature page.';
				title = 'Transforms';
				break;
				break;
			case 'MASTER_canvas':
				msg = 'Complete a level on the HTML5 Canvas feature page.';
				title = 'Canvas';
				break;
				break;
			case 'MASTER_forms':
				msg = 'You created a story on the HTML5 forms feature page.';
				title = 'Forms';
				break;
			case 'MASTER_video':
				msg = 'You went to the theater on the HTML5 video feature page.';
				title = 'Video';
				break;
			case 'MASTER_web-storage':
				msg = 'You viewed your achievements on the Web Storage feature page.';
				title = 'Web Storage';
				break;
			default:
				return;
			}
			_self.views['main'].displayAchievement(msg, $name, title);
			if (_model.data.controller == 'web-storage') {
				_landscape_controller.redrawAchievement($name);
				_demo_controller.updateWebStorage();
			}
		};
		function _adobeClick_handler($evt) {
			window.open('http://www.adobe.com/go/html5', '_blank');
		};
		function _onSharedClick_handler() {
			if (!_model.store.checkAchievementStatus('storage-trophy-adobe')) {
				_model.store.setAchievement('SHARED');
			}
		};
		function _expressiveWebClick_handler($evt) {
			var prefix = BASEURL;
			var href = BASEURL + "welcome";
			var newHref = href.split(prefix).join(prefix + '#!/');
			if (href.split(prefix)[1] != REQUEST_SCREEN) {
				_self.views['nav'].reset();
				window.location = newHref;
				_controller.getDataForFeature(href.split(prefix)[1]);
			}
			$evt.preventDefault();
		};
		function _audioEnded_handler($name) {
			if (((!jQuery.browser.mobile && !_model.testMobile) && _addPeopleForMS)) {
				_people_controller.audioEnded($name);
			}
		};
		function _onPeopleAnimatedIn_handler() {
			_self.views['bg-shadows'].render(_model.data.controller);
		};
		function _setBrowser() {
			var userAgent = navigator.userAgent.toLowerCase();
			jQuery.browser = {
				version : (userAgent.match(/.+(?:rv|it|ra|ie|me|ve)[\/: ]([\d.]+)/) || [])[1],
				chrome : /chrome/.test(userAgent),
				safari : /webkit/.test(userAgent) && !/chrome/.test(userAgent),
				opera : /opera/.test(userAgent),
				firefox : /firefox/.test(userAgent),
				msie : /msie/.test(userAgent) && !/opera/.test(userAgent),
				mozilla : /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent),
				webkit : $.browser.webkit,
				gecko : /[^like]{4} gecko/.test(userAgent),
				presto : /presto/.test(userAgent),
				xoom : /xoom/.test(userAgent),
				android : /android/.test(userAgent),
				androidVersion : (userAgent.match(/.+(?:android)[\/: ]([\d.]+)/) || [0, 0])[1],
				iphone : /iphone|ipod/.test(userAgent),
				iphoneVersion : (userAgent.match(/.+(?:iphone\ os)[\/: ]([\d_]+)/) || [0, 0])[1].toString().split('_').join('.'),
				ipad : /ipad/.test(userAgent),
				ipadVersion : (userAgent.match(/.+(?:cpu\ os)[\/: ]([\d_]+)/) || [0, 0])[1].toString().split('_').join('.'),
				blackberry : /blackberry/.test(userAgent),
				winMobile : /Windows\ Phone/.test(userAgent),
				winMobileVersion : (userAgent.match(/.+(?:windows\ phone\ os)[\/: ]([\d_]+)/) || [0, 0])[1]
			};
			jQuery.browser.mobile = ($.browser.iphone || $.browser.ipad || $.browser.android || $.browser.blackberry);
		};
		this.construct = function construct() {
			_setBrowser();
			_model = models.Model;
			_controller = new Controller(_model);
			_landscape_controller = new LandscapeController(_model);
			_demo_controller = new DemoController(_model);
			_overlay_controller = new OverlayController(_model);
			_label_controller = new LabelController(_model);
			_description_controller = new DescriptionController(_model);
			_addPeopleForMS = _model.checkMajorVersionFor('msie', 8);
			if ((!jQuery.browser.mobile && !_model.testMobile) && _addPeopleForMS) {
				_people_controller = new PeopleController(_model);
				_people_controller.animateInCompleted.add(_onPeopleAnimatedIn_handler);
			}
			$('.share').click(_onSharedClick_handler);
			$(window).scrollTo(0, 1);
			$(window).resize(function () {
				if (REQUEST_SCREEN == 'selectors' && $(window).width() < _min_width_achieved && !_model.store.checkAchievementStatus('storage-ribbon-blue')) {
					_min_width_achieved = $(window).width();
					if (_min_width_achieved <= 480) {
						_model.store.setAchievement('BURGER');
					}
				}
			});
			$('#expressive-web').click(_expressiveWebClick_handler);
			$('#adobe-logo').click(_adobeClick_handler);
		};
		this.init = function init() {
			_model.dataLoaded.add(_dataLoaded_handler);
			_model.notSupported.add(_featureNotSupported_handler);
			_model.store.achievementObtained.add(_onAchievementObtained_handler);
			_landscape_controller.animateOutCompleted.add(_onLandscapeAnimateOutCompleted_handler);
			_description_controller.animateInCompleted.add(_onDescriptionAnimateInCompleted_handler);
			_self.attach();
			if (jQuery.browser.webkit) {
				$('body').addClass('browser-webkit');
			}
			if (jQuery.browser.ipad) {
				$('body').addClass('browser-ipad');
			}
			if (jQuery.browser.ipad && jQuery.browser.ipadVersion > 1) {
				$('body').addClass('browser-ipad2');
			}
			if (jQuery.browser.android) {
				$('body').addClass('browser-android');
			}
			if (!jQuery.browser.webkit || jQuery.browser.mobile) {
				var includeMethod = ExpressiveWeb['include'];
				includeMethod(BASEURL + "js/jquery-ui-1.8.14.mouse.touch.min.js");
			}
		};
		this.setSelf = function setSelf($self) {
			_self = $self;
		};
		return ExpressiveWeb.create(_self, {
			init : 'init',
			construct : 'construct'
		});
	})();
views.BackgroundShadowsView = function () {
	var _self = this;
	var _dom;
	var _model;
	var _controller;
	var _items = [];
	this.names = {};
	this.names.welcome = [];
	this.names.animations = ['shadows_animation_hurdle', 'shadows_animation_man', 'animations_grass_1', 'animations_grass_2', 'animations_grass_3', 'animations_grass_4', 'animations_grass_5', 'animations_tree_1', 'animations_tree_2', 'animations_tree_3'];
	this.names.gradients = ['shadow_gradients_saucerfromcup', 'shadows_gradients_cup', 'shadows_gradients_saucerinside', 'shadows_gradients_spoon'];
	this.names.selectors = [];
	this.names.shadows = ['shadows_boxshadow_sundial', 'shadows_boxshadow_sun_1', 'shadows_boxshadow_sun_2', 'shadows_boxshadow_sun_4', 'shadows_boxshadow_sun_5', ];
	this.names.transforms = [];
	this.names.transitions = [];
	this.names.drag = ['shadows_drag_frame03', 'shadows_drag_frame04', 'shadows_drag_frame06'];
	this.names.audio = ['shadows_audio_sm_chair_1', 'shadows_audio_sm_chair_2', 'shadows_audio_sm_chair_3', 'shadows_audio_sm_chair_4', 'shadows_audio_sm_chair_5', 'shadows_audio_sm_chair_6', 'shadows_audio_chair01', 'shadows_audio_couch', 'shadows_audio_desk'];
	this.names.canvas = [];
	this.names.forms = ['shadows_forms_glasses', 'shadows_forms_pen', 'shadows_forms_pencil'];
	this.names.video = ['shadows_video_car_1', 'shadows_video_car_3', 'shadows_video_projector', 'shadows_video_screen'];
	this.names.touch = ['shadows_touch_brush', 'shadows_touch_easel', 'shadows_touch_paint'];
	this.names['web-storage'] = ['shadows_storage_upperright', 'shadows_storage_upperleft', 'shadows_storage_middle', 'shadows_storage_lowerright', 'shadows_storage_lowerleft'];
	this.names.fonts = ['shadows_text_a', 'shadows_text_b', 'shadows_text_c'];
	this.animateInCompleted = new signals.Signal();
	var _current = '';
	var _animatedInCount = 0;
	this.name = "views.BackgroundShadowsView";
	this.render = function render($feature) {
		_current = $feature;
		if (!_self.names[$feature] || !_self.names[$feature].length) {
			_self.animateInCompleted.dispatch();
			return;
		}
		for (var i = 0; i < _self.names[$feature].length; i++) {
			var bg = $('<div id="' + _self.names[$feature][i] + '" class="background-item"></div>');
			bg.appendTo($('.scene'));
			_items.push(bg);
			if (!_self.checkMajorVersionFor('msie', 9)) {
				_updateCount();
			} else {
				bg.animate({
					opacity : 1
				}, {
					duration : 300,
					specialEasing : {
						opacity : 'easeOutSine'
					},
					complete : function () {
						_updateCount();
					}
				});
			}
		};
	};
	function _updateCount() {
		_animatedInCount++;
		if (_animatedInCount == _self.names[_current].length) {
			_self.animateInCompleted.dispatch();
			_animatedInCount = 0;
		}
	};
	this.removeBackgroundElements = function removeBackgroundElements($going_to) {
		for (var i = 0; i < _items.length; i++) {
			_self.removeElement(_items[i]);
		};
		_items = [];
	};
	ExpressiveWeb.create(_self, {
		register : true,
		extend : 'views.View'
	});
};
views.BackgroundView = function () {
	var _self = this;
	var _dom;
	var _model;
	var _controller;
	var _bg_elements = [];
	this.names = {};
	this.names.defaut = ['bg_NE1', 'bg_NE2', 'bg_NW', 'bg_SE'];
	this.names.canvas = ['wall_left', 'wall_right', 'wall_top'];
	this.names.audio = ['audio_bg1', 'audio_bg2', 'audio_bg3'];
	this.names.selectors = ['storage_bg1', 'storage_bg3', 'storage_bg4', 'storage_bg5'];
	this.names.animations = ['animations_bg_1', 'animations_bg_2'];
	this.names['web-storage'] = ['storage_bg1', 'storage_bg3', 'storage_bg4', 'storage_bg5'];
	this.names.forms = ['bg_NW', 'bg_SE'];
	this.names.gradients = ['c_01', 'c_02', 'c_03'];
	this.names.transitions = ['d_01', 'd_02', 'd_03', 'd_04'];
	this.names.shadows = ['e_01', 'e_02', 'e_03'];
	this.names.touch = ['e_01', 'e_02', 'e_03b'];
	this.names.transforms = ['f_01', 'f_02'];
	this.names.video = ['shadows_video_wall', 'bg_NE1', 'bg_NE2', 'bg_NW', 'bg_SE'];
	this.animateInCompleted = new signals.Signal();
	var _current = '';
	var _animatedInCount = 0;
	this.name = "views.BackgroundView";
	this.render = function render($feature) {
		if ($feature == 'welcome') {
			_current = $feature;
			_self.animateInCompleted.dispatch();
			_animatedInCount = 0;
			return;
		}
		if ($feature == _current) {
			_self.animateInCompleted.dispatch();
			_animatedInCount = 0;
			return;
		}
		if (!_self.names[$feature]) {
			if (_current == 'defaut') {
				_self.animateInCompleted.dispatch();
				return;
			}
			_current = 'defaut';
			for (var i = 0; i < _self.names.defaut.length; i++) {
				var bg = $('<div id="' + _self.names.defaut[i] + '" class="background-item"></div>');
				bg.appendTo($('.scene'));
				_bg_elements.push(bg);
				if (!_self.checkMajorVersionFor('msie', 9)) {
					_updateCount();
				} else {
					bg.animate({
						opacity : 1
					}, {
						duration : 300,
						specialEasing : {
							opacity : 'easeOutSine'
						},
						complete : function () {
							_updateCount();
						}
					});
				}
			};
		} else {
			_current = $feature;
			if (!_self.names[$feature].length) {
				_self.animateInCompleted.dispatch();
				return;
			}
			for (var i = 0; i < _self.names[$feature].length; i++) {
				var bg = $('<div id="' + _self.names[$feature][i] + '" class="background-item"></div>');
				bg.appendTo($('.scene'));
				_bg_elements.push(bg);
				if (!_self.checkMajorVersionFor('msie', 9)) {
					_updateCount();
				} else {
					bg.animate({
						opacity : 1
					}, {
						duration : 300,
						specialEasing : {
							opacity : 'easeOutSine'
						},
						complete : function () {
							_updateCount();
						}
					});
				}
			};
		}
	};
	function _updateCount() {
		_animatedInCount++;
		if (_animatedInCount == _self.names[_current].length) {
			_self.animateInCompleted.dispatch();
			_animatedInCount = 0;
		}
	};
	this.removeBackgroundElements = function removeBackgroundElements($going_to) {
		if (_current == 'welcome' && !_self.names[$going_to]) {
			return;
		}
		for (var i = 0; i < _bg_elements.length; i++) {
			_self.removeElement(_bg_elements[i]);
		};
		_bg_elements = [];
	};
	ExpressiveWeb.create(_self, {
		register : true,
		extend : 'views.View'
	});
};
views.FooterView = function () {
	var _self = this;
	var _dom;
	var _model;
	var _controller;
	this.name = "views.FooterView";
	this.render = function render() {};
	this.init = function init($dom, $model, $controller) {
		_dom = $dom;
		_model = $model;
		_controller = $controller;
		this.__super__($dom, $model, $controller);
		_self.render();
	};
	ExpressiveWeb.create(_self, {
		register : true,
		extend : 'views.View'
	});
};
views.NavView = function () {
	var _self = this;
	var _dom;
	var _model;
	var _controller;
	this.name = "views.NavView";
	this.isIn = false;
	this.render = function render() {
		$('.menu-item').click(_navClick_handler);
		$(_dom).css({
			display : 'block',
			zIndex : 0
		});
		setTimeout(_activate, 150);
	};
	this.reset = function reset() {
		$('#nav-menu-items').children('li').each(function () {
			$(this).removeClass('selected');
		});
	};
	function _navClick_handler($evt) {
		$evt.preventDefault();
		if ($($evt.target).parent().hasClass('selected')) {
			return;
		}
		$('#nav-menu-items').children('li').each(function () {
			if ($(this).hasClass('selected')) {
				$(this).removeClass('selected');
			}
		});
		$($evt.target).parent().addClass('selected');
		var prefix = BASEURL;
		var href = $evt.target.href.toString();
		var newHref = href.split(prefix).join(prefix + '#!/');
		var f = href.split(prefix)[1];
		if (f != REQUEST_SCREEN) {
			_model.ignore_hash_change = true;
			window.location = newHref;
			document.title = _model.pageTitles[f];
			_controller.getDataForFeature(f);
		}
	};
	function _setSelected() {
		var pieces = window.location.toString().split('/');
		var feature = pieces[pieces.length - 1];
		if (feature == "") {
			return;
		}
		$('#nav-menu-items').children('li').each(function () {
			if ($(this).attr('id').indexOf(feature) >= 0) {
				if ($(this).attr('id') == 'nav-transforms' && feature == 'forms')
					return;
				$(this).addClass('selected');
			}
		});
	};
	function _activate() {
		$(_dom).addClass('active');
		setTimeout(_resetCSS, 600);
	};
	function _resetCSS() {
		$(_dom).css('-webkit-transition', 'none').css('-moz-transition', 'none').css('-o-transition', 'none').css('-ms-transition', 'none').css('transition', 'none');
	};
	this.init = function init($dom, $model, $controller) {
		_dom = $dom;
		_model = $model;
		_controller = $controller;
		this.__super__($dom, $model, $controller);
		_self.render();
		_setSelected();
		_self.isIn = true;
	};
	ExpressiveWeb.create(_self, {
		register : true,
		extend : 'views.View'
	});
};
views.SubNavView = function () {
	var _self = this;
	var _dom;
	var _model;
	var _controller;
	this.name = "views.SubNavView";
	this.isIn = false;
	this.render = function render() {
		$('.scroll_to_description').click(scrollToBrowser);
		$('.scroll_to_examples').click(scrollToExamples);
		$('.scroll_to_detection').click(scrollToFeatureDetection);
		$('.scroll_to_products').click(scrollToAdobeProducts);
		_self.animateIn();
	};
	this.remove = function remove() {
		_self.isIn = false;
		$('#sub-nav-shadow').fadeOut('slow');
		_self.animateOut();
	};
	function scrollToBrowser($event) {
		if (!isTablet()) {
			$("html,body").animate({
				scrollTop : $('#browser-0').offset().top
			})
		} else {
			contentTablet(true, 'browser-0');
			if (!$($event.target).hasClass('active')) {
				$('#sub-nav-container .active').removeClass('active');
				$($event.target).addClass('active');
			}
		}
	}
	function scrollToExamples($event) {
		if (!isTablet()) {
			$("html,body").animate({
				scrollTop : $('#examples').offset().top
			});
		} else {
			contentTablet(true, 'examples');
			if (!$($event.target).hasClass('active')) {
				$('#sub-nav-container .active').removeClass('active');
				$($event.target).addClass('active');
			}
		}
	}
	function scrollToFeatureDetection($event) {
		if (!isTablet()) {
			$("html,body").animate({
				scrollTop : $('#feature-detection').offset().top
			});
		} else {
			contentTablet(true, 'feature-detection');
			if (!$($event.target).hasClass('active')) {
				$('#sub-nav-container .active').removeClass('active');
				$($event.target).addClass('active');
			}
		}
	}
	function scrollToAdobeProducts($event) {
		if (!isTablet()) {
			$("html,body").animate({
				scrollTop : $('#adobe-products').offset().top
			});
		} else {
			contentTablet(true, 'adobe-products');
			if (!$($event.target).hasClass('active')) {
				$('#sub-nav-container .active').removeClass('active');
				$($event.target).addClass('active');
			}
		}
	}
	function isTablet() {
		var return_value = jQuery.browser.ipad;
		if ($(window).width() <= 1024 && $(window).width() > 1000) {}
		return return_value;
	}
	function contentTablet($activate, $id) {
		if (isTablet()) {
			if ($activate) {
				if (!$('#content').hasClass('tablet-active')) {
					if (!$('#tablet-back-link').length) {
						$('#container').append('<a id="tablet-back-link" href="#"><div>Back to<br />Demo</div></a>');
						$('#tablet-back-link').hide().click(backToDemo)
					}
					$('#tablet-back-link').slideDown();
					$('.description').fadeOut();
					$('#content').addClass('tablet-active');
					$('#sub-nav').addClass('tablet-active');
					$('#sub-nav-shadow').addClass('tablet-active');
					$('#landscape').addClass('tablet-active');
					$('#nav').addClass('tablet-active');
				}
			}
			if (!$activate) {
				if ($('#content').hasClass('tablet-active')) {
					$('#tablet-back-link').slideUp();
					$('.description').fadeIn();
					$('#content').removeClass('tablet-active');
					$('#sub-nav').removeClass('tablet-active');
					$('#sub-nav-shadow').removeClass('tablet-active');
					$('#landscape').removeClass('tablet-active');
					$('#nav').removeClass('tablet-active');
					$('#sub-nav-container .active').removeClass('active');
				}
			}
			if ($id !== undefined) {
				setTimeout(function () {
					tabletScrollTo($id)
				}, 100);
			}
		}
	}
	function tabletScrollTo($id) {
		$('#content').scrollTo($('#' + $id), 450, {
			axis : 'y'
		});
	}
	function backToDemo($event) {
		if (isTablet()) {
			$event.preventDefault();
			contentTablet(false, 'browser-0');
		}
	}
	this.init = function init($dom, $model, $controller) {
		_dom = $dom;
		_model = $model;
		_controller = $controller;
		this.__super__($dom, $model, $controller);
		_self.render();
		$('#sub-nav-shadow').fadeIn('slow');
		_self.isIn = true;
	};
	ExpressiveWeb.create(_self, {
		register : true,
		extend : 'views.View'
	});
};
views.ToolTipView = function () {
	var _self = this;
	var _tips = {
		video : "<p class=\"p1\"><a href='http://www.bigbuckbunny.org' target='_blank'>www.bigbuckbunny.org</a></p><p>&copy; 2008, Blender Foundation</p>",
		drag : "<p class=\"p2\">Try <span>dragging</span> an image from your desktop!</p>",
		shadows : "<p class=\"p2\"><span>Click</span> a light to adjust the shadow!</p>"
	};
	var _positions = {
		video : [427, 366],
		drag : [460, -60],
		shadows : [282, -223]
	};
	this.name = "views.ToolTipView";
	this.render = function render() {
		var show = true;
		if (REQUEST_SCREEN == 'drag') {
			if (jQuery.browser.mobile || !Modernizr.draganddrop) {
				show = false;
			}
		} else if (REQUEST_SCREEN == 'video') {
			show = Modernizr.video
		} else if (REQUEST_SCREEN == 'shadows') {
			show = Modernizr.boxshadow
		}
		if (_tips[REQUEST_SCREEN] && show) {
			$('#tooltips').empty();
			$('#tooltips').append('<div id="tip-' + REQUEST_SCREEN + '" class="tooltip-title">' + _tips[REQUEST_SCREEN] + '</div>');
			$('#tooltips').css({
				top : _positions[REQUEST_SCREEN][0],
				left : _positions[REQUEST_SCREEN][1]
			});
			$('#tooltips').hide().fadeIn(500);
		}
	};
	this.remove = function remove() {
		if (_tips[REQUEST_SCREEN]) {
			$('#tooltips').fadeOut(500);
		}
	};
	ExpressiveWeb.create(_self);
};
views.View = function () {
	var _self = this;
	var _dom;
	var _model;
	var _controller;
	var _bg_elements = [];
	var _articleTag;
	this.name = "views.View";
	this.animateInCompleted = new signals.Signal();
	this.animateInStarted = new signals.Signal();
	this.animateOutCompleted = new signals.Signal();
	this.animateOutStarted = new signals.Signal();
	this.animateIn = function animateIn() {
		if (!isTablet()) {
			$(_dom).fadeIn(500, _onAnimateIn);
		} else {
			_onAnimateIn();
			setTimeout(_onAnimateIn, 500);
		}
		_self.animateInStarted.dispatch();
		return this;
	};
	this.animateOut = function animateOut() {
		if (!isTablet()) {
			$(_dom).fadeOut(500, _onAnimateOut);
		} else {
			setTimeout(_onAnimateOut, 500);
		}
		_self.animateOutStarted.dispatch();
		return this;
	};
	this.construct = function construct() {};
	this.init = function init($dom, $model, $controller) {
		_dom = $dom;
		_model = $model;
		_controller = $controller;
		_articleTag = jQuery.browser.msie ? 'div' : 'article';
	};
	this.displayAchievement = function displayAchievement($msg, $name, $title) {
		if (_model.checkSpecificFeatureCompatibility('web-storage')) {
			$('#achievements').empty();
			if ($('#achievements').parent() !== $('#demo-description')) {
				$('#achievements').appendTo('#demo-description');
			}
			var achievement_html = '';
			if ($title !== undefined && $title !== '') {
				achievement_html = '<a href="' + BASEURL + '#!/html5-web-storage"><p>Achievement Earned: <span class="achievement-text-title">' + $title + '</span>!</p><p>' + $msg + '</p></a>';
			} else {
				achievement_html = '<p>Achievement Earned!</p><p>' + $msg + '</p>';
			}
			var achievement = $('<div class="achievement" id="achievement-' + $name + '"><div class="achievement-close">Close</div>' + achievement_html + '</div>');
			achievement.appendTo($('#achievements'));
			setTimeout(_animateIn, 100);
			$('.achievement-close').click(_animateOutAchievement);
			setTimeout(_animateOutAchievement, 6000);
		}
	};
	this.remove = function remove() {
		_animateOutAchievement();
	};
	function _animateIn() {
		$('#achievements').addClass('active');
	};
	function _animateOutAchievement() {
		if ($('#achievements').hasClass('active')) {
			$('#achievements').removeClass('active');
		}
	};
	this.render = function render() {
		_dom.find('*:not(#footer)').each(function () {
			if (!$(this).parents('#footer').length) {
				$(this).remove();
			}
		});
		for (var i = 0; i < _bg_elements.length; i++) {
			_bg_elements[i].show();
		};
		if (_model.data.controller !== 'welcome') {
			var browser_support = [];
			for (var i = 0; i < _model.data.browser_support.length; i++) {
				browser_support[i] = $('<' + _articleTag + ' id="browser-' + i + '" class="browser"></' + _articleTag + '>');
				browser_support[i].append('<h3 class="feature-title">Minimum Browser Support:</h3>');
				browser_support[i].append('<div class="feature-title-link">' + _model.data.browser_support[i].label + '</div>');
				browser_support[i].append('<ul class="browser-support"></ul>');
				foreach(_model.data.browser_support[i], function ($k, $v) {
					if ($k === 'chrome' || $k === 'firefox' || $k === 'android' || $k === 'ios' || $k === 'opera' || $k === 'opera_mobile' || $k === 'safari' || $k === 'ie') {
						var browser_name = $k.charAt(0).toUpperCase() + $k.slice(1).replace(/_/g, ' ');
						if ($k === 'ios') {
							browser_name = 'iOS';
						}
						if ($k === 'ie') {
							browser_name = 'Internet Explorer';
						}
						if ($k === 'opera_mobile') {
							browser_name = 'Opera Mobile';
						}
						browser_support[i].find('.browser-support').append('<li class="browser-icon browser-' + $k + '"><p class="browser-name">' + browser_name + '</p><p class="browser-version">' + $v + '</p></li>');
					}
					if ($k === 'note') {
						browser_support[i].append('<p class="codec-note">' + $v + '</p>');
					}
				});
				browser_support[i].append('<div class="percentage">' + _model.data.browser_support[i].percent + '</div>');
				browser_support[i].append('<div class="percentage-text">Percentage of users who can view this feature (source: <a href="' + _model.data.caniuse + '" target="_blank">caniuse.com</a>)</div>');
				browser_support[i].append('<div class="clearer"></div>');
			}
			var stripe = $('<div id="stripe"></div>');
			stripe.append('<div id="stripe-wrapper"></div>');
			stripe.find('#stripe-wrapper').append('<' + _articleTag + ' id="examples"></' + _articleTag + '>');
			stripe.find('#stripe-wrapper').append('<' + _articleTag + ' id="reference-documentation"></' + _articleTag + '>');
			stripe.find('#stripe-wrapper').append('<' + _articleTag + ' id="tutorials"></' + _articleTag + '>');
			stripe.find('#stripe-wrapper').append('<div class="clearer"></div>');
			stripe.find('#examples').append('<h3>Examples</h3><ul></ul>');
			stripe.find('#reference-documentation').append('<h3>Reference and Documentation</h3><ul></ul>');
			stripe.find('#tutorials').append('<h3>Tutorials and Resources</h3><ul></ul>');
			var example_count = 1;
			for (var i = 0; i < _model.data.examples.length; i++) {
				var example = _model.data.examples[i];
				var id_string = example.title.toLowerCase().replace(/ /g, '-');
				stripe.find('#examples ul').append('<li class="example" id="example-' + id_string + '"><a href="' + example.url + '" style="background-image: url(' + BASEURL + 'images/assets/jpg/example-thumbnails/example_' + _model.data.controller + '_' + Number(i + 1) + '.jpg)">' + example.title + '</a><p>' + example.text + '</p></li>');
			}
			foreach(_model.data.reference_and_documentation, function ($k, $v) {
				stripe.find('#reference-documentation ul').append('<li class="ref-doc" id="ref-doc-' + $k + '"><a href="' + $v + '">' + $k + '</a></li>');
			});
			foreach(_model.data.tutorials, function ($k, $v) {
				stripe.find('#tutorials ul').append('<li class="tutorial" id="tutorial-' + $k + '"><a href="' + $v + '">' + $k + '</a></li>');
			});
			var feature_fallback = $('<div id="feature-fallback"></div>');
			feature_fallback.append('<' + _articleTag + ' id="feature-detection"></' + _articleTag + '>');
			feature_fallback.find('#feature-detection').append('<h3>Feature Detection</h3>');
			foreach(_model.data.feature_detection, function ($k, $v) {
				if ($k == 'desc') {
					feature_fallback.find('#feature-detection').append('<div id="feature_detection description">' + $v + '</div>');
				} else if ($k == 'detection') {
					feature_fallback.find('#feature-detection').append('<div id="feature_detection" class="detect-code"><code>' + $v + '</code></div>');
				} else {
					feature_fallback.find('#feature-detection').append('<li class="feature-detection link" id="feature_detection-' + $k + '"><a href="' + $v + '">' + $k + '</a></li>');
				}
			});
			feature_fallback.find('#feature-detection').append('<p>Learn more about detecting feature support with <a href="http://www.modernizr.com/docs/">Modernizr</a>.</p>')
			feature_fallback.append('<' + _articleTag + ' id="fallback-strategies"></' + _articleTag + '>');
			feature_fallback.find('#fallback-strategies').append('<h3>Fallback Strategies</h3>');
			foreach(_model.data.fall_back_strategies, function ($k, $v) {
				if ($k == 'desc') {
					feature_fallback.find('#fallback-strategies').append('<div id="fallback-strategy description">' + $v + '</div>');
				} else {
					feature_fallback.find('#fallback-strategies').append('<li class="fallback-strategy link" id="fallback-strategy-' + $k + '"><a href="' + $v + '">' + $k + '</a></li>');
				}
			});
			var products = $('<div id="adobe-products"></div>');
			products.append('<h3>Related Adobe Technologies</h3><ul></ul>');
			foreach(_model.data.adobe_products[0], function ($k, $v) {
				var product_name_short = $v.name.toLowerCase().replace(/ /g, '-').replace('.', '-').replace('(', '').replace(')', '');
				products.find('ul').append('<li class="product" id="product-' + product_name_short + '"><a href="' + $v.link + '">' + $v.name + '</a></li>');
			});
			products.append('<div class="clearer"></div>');
			for (var i = 0; i < browser_support.length; i++) {
				browser_support[i].appendTo(_dom);
			}
			stripe.appendTo(_dom);
			feature_fallback.appendTo(_dom);
			products.appendTo(_dom);
		} else {
			$(_dom).append('<' + _articleTag + ' id="expressive-web-intro">' + _model.data.description + '</' + _articleTag + '>');
		}
		_self.animateIn();
	};
	function _onAnimateIn() {
		_self.animateInCompleted.dispatch();
	};
	function _onAnimateOut() {
		_self.animateOutCompleted.dispatch();
	};
	function isTablet() {
		return_value = jQuery.browser.ipad;
		if ($(window).width() <= 1024 && $(window).width() > 1000) {
			return_value = true;
		}
		return return_value;
	}
	this.checkMajorVersionFor = function checkMajorVersionFor($name, $version) {
		var ret = true;
		if (jQuery.browser[$name]) {
			var maj = parseInt(jQuery.browser.version.split('.')[0]);
			if (maj < $version) {
				ret = false;
			}
		}
		return ret;
	};
	this.removeElement = function removeElement($div) {
		if (!_self.checkMajorVersionFor('msie', 9)) {
			$div.remove();
		} else {
			$div.animate({
				opacity : 0
			}, {
				duration : 300,
				specialEasing : {
					opacity : 'easeOutSine'
				},
				complete : function () {
					$div.remove();
				}
			});
		}
	};
	return ExpressiveWeb.create(_self);
};
function AssetCodeParser($str) {
	var _self = this;
	var _str = $str || '';
	var _parsedBlock = [];
	var _parsedArray = [];
	this.name = "AssetCodeParser";
	this.get = function get() {
		return _parsedArray;
	};
	this.parseBlock = function parseBlock() {
		_parsedBlock = _str.split('|');
		return _parsedBlock;
	};
	this.parseCube = function parseCube($cubeString) {
		var cube = $cubeString.split('.');
		return {
			color : cube[0],
			id : cube[1],
			y : cube[2],
			x : cube[3],
			z : cube[4]
		};
	};
	this.parseAll = function parseAll() {
		var cube;
		_self.parseBlock();
		for (var i = 0, l = _parsedBlock.length; i < l; i++) {
			cube = _self.parseCube(_parsedBlock[i]);
			_parsedArray.push(_self.parseCube(_parsedBlock[i]));
		};
		return _parsedArray;
	};
	return this;
};
function AssetBuilder($ref, $blockString) {
	var _self = this;
	var _a = 0,
	_b = 0,
	_c = 0;
	var _canvas = $ref || $('#blocks');
	var _context = _canvas.get()[0].getContext('2d');
	var _spriteSheet = new Image();
	var _colorPool = ['blue', 'orange', 'green', 'purple', 'red', 'yellow'];
	var _colorObj = {
		B : 'blue',
		O : 'orange',
		G : 'green',
		P : 'purple',
		R : 'red',
		Y : 'yellow'
	};
	var _blockString = $blockString;
	var _string = new AssetCodeParser(_blockString);
	var _stringAry = _string.parseAll();
	var _params = {
		left : 0,
		top : 0,
		z : 0
	};
	var _interval = null;
	var _min_x = Number.MAX_VALUE;
	var _max_x = Number.MIN_VALUE;
	var _min_y = Number.MAX_VALUE;
	var _max_y = Number.MIN_VALUE;
	var _width = 0;
	var _height = 0;
	this.name = "AssetBuilder";
	this.animateInCompleted = new signals.Signal();
	this.animateOutCompleted = new signals.Signal();
	function _drawBlue($x, $y, $shade) {
		_drawColor('blue', $x, $y, $shade);
	};
	function _drawOrange($x, $y, $shade) {
		_drawColor('orange', $x, $y, $shade);
	};
	function _drawGreen($x, $y, $shade) {
		_drawColor('green', $x, $y, $shade);
	};
	function _drawPurple($x, $y, $shade) {
		_drawColor('purple', $x, $y, $shade);
	};
	function _drawRed($x, $y, $shade) {
		_drawColor('red', $x, $y, $shade);
	};
	function _drawYellow($x, $y, $shade) {
		_drawColor('yellow', $x, $y, $shade);
	};
	function _drawColor($color, $x, $y, $shade) {
		$shade = isNaN($shade) ? Math.floor(Math.random() * 7) : $shade;
		switch ($color) {
		case 'blue':
			$color = 0;
			break;
		case 'orange':
			$color = 1;
			break;
		case 'green':
			$color = 2;
			break;
		case 'purple':
			$color = 3;
			break;
		case 'red':
			$color = 4;
			break;
		case 'yellow':
			$color = 5;
			break;
		};
		_drawSquare($color, $shade, $x, $y);
	};
	function _drawSquare($row, $col, $placeX, $placeY) {
		var row = $row || 0;
		var col = $col || 0;
		var width = 28;
		var height = 28;
		var placeX = $placeX || 0;
		var placeY = $placeY || 0;
		_context.drawImage(_spriteSheet, col * width, row * height, width, height, placeX, placeY, width, height);
	};
	function _draw() {
		if (_blockString) {
			_interval = setInterval(_drawFromString, 5);
		} else {
			_interval = setInterval(_drawTimer, 20);
		};
	};
	function _drawFromString() {
		if (_a > _stringAry.length - 1) {
			clearInterval(_interval);
			_a = 0;
			_self.animateInCompleted.dispatch();
			return false;
		};
		var cube = _stringAry[_a];
		var color = _colorObj[cube.color];
		_drawColor(color, parseFloat(cube.x) + (-_min_x), parseFloat(cube.y) + (-_min_y));
		_a++;
	};
	function _drawTimer() {
		var x_base = 13;
		var y_base = 6.5;
		var x_offset = _canvas.width();
		var y_offset = 0;
		var color = _colorPool.sort(function () {
				return 0.5 - Math.random()
			})[0];
		_drawColor(color, x_base * (_a - _b) + x_offset, y_base * (_a + _b) + y_offset);
		_a++;
		if (_a > 10) {
			_b++;
			_a = 0;
		};
	};
	function _loadSprites() {
		_spriteSheet.src = './images/blocks.png';
		_spriteSheet.onload = _draw;
	};
	this.remove = function remove() {
		_canvas.remove();
	};
	this.load = function load($params) {
		_loadSprites();
		if ($params)
			_params = $params;
		_canvas.appendTo($('.scene'));
		_stringAry.sortOn('z');
		for (var i = 0; i < _stringAry.length; i++) {
			if (parseFloat(_stringAry[i].x) < _min_x)
				_min_x = parseFloat(_stringAry[i].x);
			if (parseFloat(_stringAry[i].y) < _min_y)
				_min_y = parseFloat(_stringAry[i].y);
			if (parseFloat(_stringAry[i].x) > _max_x)
				_max_x = parseFloat(_stringAry[i].x);
			if (parseFloat(_stringAry[i].y) > _max_y)
				_max_y = parseFloat(_stringAry[i].y);
		};
		_width = (_max_x - _min_x) + 28;
		_height = (_max_y - _min_y) + 28;
		_canvas.attr('width', _width);
		_canvas.attr('height', _height);
		_canvas.attr('style', 'left: ' + _params.left + 'px; top: ' + _params.top + 'px; z-index: ' + _params.z + ';');
		return _self;
	};
	return this;
};
if (!Array.sortOn) {
	Array.prototype.sortOn = function ($key) {
		this.sort(function (a, b) {
			return (parseInt(a[$key]) > parseInt(b[$key])) - (parseInt(a[$key]) < parseInt(b[$key]));
		});
	};
};
function SpritesheetAnimator($div) {
	var _self = this;
	var _speed;
	var _currentX;
	var _currentY;
	var _top;
	var _imageWidth;
	var _imageHeight;
	var _divWidth;
	var _divHeight;
	var _pause;
	var _offset;
	var _restartX;
	var _restartY;
	var _animationID;
	var _static;
	this.div = $div;
	this.name = "SpritesheetAnimator";
	this.animateOutCompleted = new signals.Signal();
	this.audioDone = new signals.Signal();
	this.isPlaying = false;
	this.init = function init($params) {
		_top = $params.top || 500;
		_speed = $params.speed || 100;
		_imageWidth = $params.imageWidth || 100;
		_imageHeight = $params.imageHeight || 100;
		_divWidth = $params.divWidth || 20;
		_divHeight = $params.divHeight || 20;
		_pause = $params.pause || 3000;
		_offset = $params.offset || 0;
		_static = $params.static || false;
		_currentX = 0;
		_currentY = 0;
		_restartX = -_imageWidth;
		_restartY = -_imageHeight;
		return _self;
	};
	this.play = function play() {
		_startAnimation();
	};
	this.stop = function stop() {
		_currentX = _currentY = 0;
		_self.div.css("background-position", _currentX + "px " + _currentY + "px");
		clearInterval(_animationID);
		_animationID = null;
		_self.isPlaying = false;
	};
	this.animateIn = function animateIn() {
		switch (_self.div.attr('id')) {
		case 'cheer':
		case 'clap':
		case 'laugh':
		case 's_cheer':
		case 's_clap':
		case 's_laugh':
		case 't_cheer':
		case 't_clap':
		case 't_laugh':
			_self.div.css('visibility', 'hidden');
			break;
		}
		_self.div.animate({
			top : _top
		}, {
			duration : 750,
			specialEasing : {
				top : 'easeOutBounce'
			},
			complete : function () {
				_startSequence();
			}
		});
	};
	this.animateOut = function animateOut() {
		clearInterval(_animationID);
		_animationID = null;
		_self.div.animate({
			top : -_divHeight
		}, {
			duration : 400,
			specialEasing : {
				top : 'easeOutSine'
			},
			complete : function () {
				_self.animateOutCompleted.dispatch();
			}
		});
	};
	function _startSequence() {
		if (_static == 'true')
			return;
		if (_isSpecialCase(_self.div.attr('id'))) {
			return;
		}
		if (_isBombPerson(_self.div.attr('id'))) {
			return;
		}
		if (!_offset) {
			_startAnimation();
		} else {
			setTimeout(_startAnimation, _offset);
		}
	};
	function _animate() {
		_currentX -= _divWidth;
		if (_currentX <= _restartX) {
			_currentY -= _divHeight;
			if (_currentY <= _restartY) {
				_currentY = 0;
			}
			_currentX = 0;
		}
		if (_currentX == 0 && _currentY == 0) {
			clearInterval(_animationID);
			_animationID = null;
			_self.div.css("background-position", _currentX + "px " + _currentY + "px");
			if (_pause == 0) {
				if (_isSignPerson(_self.div.attr('id')) || _isBombPerson(_self.div.attr('id'))) {
					return;
				}
				_startAnimation();
			} else {
				setTimeout(_startAnimation, _pause);
			}
			return;
		}
		_self.div.css("background-position", _currentX + "px " + _currentY + "px");
	};
	function _startAnimation() {
		_animationID = setInterval(_animate, _speed);
		_self.isPlaying = true;
	};
	function _updateCount() {
		_outCount++;
	};
	function _isSpecialCase($id) {
		var b = false;
		switch ($id) {
		case 'boo':
		case 'cheer':
		case 'clap':
		case 'laugh':
		case 's_boo':
		case 's_cheer':
		case 's_clap':
		case 's_laugh':
		case 't_boo':
		case 't_cheer':
		case 't_clap':
		case 't_laugh':
			b = true;
			break;
		}
		return b;
	};
	function _isSignPerson($id) {
		var b = false;
		switch ($id) {
		case 's_boo':
		case 's_cheer':
		case 's_clap':
		case 's_laugh':
			b = true;
			break;
		}
		return b;
	};
	function _isBombPerson($id) {
		var b = false;
		switch ($id) {
		case 'karayzee_bomb':
		case 'jump_bomb':
		case 'jp_bomb':
		case 'rob_bomb':
			b = true;
			break;
		}
		return b;
	};
	return this;
};
WebStorage = function () {
	var _self = this;
	var _features = ['css3-animations', 'css3-gradients', 'css3-media-queries', 'css3-shadows', 'css3-transforms', 'css3-transitions', 'css3-web-fonts', 'html5-audio', 'html5-canvas', 'html5-forms', 'html5-video', 'html5-web-storage'];
	var _lastActivity;
	var _timestamp;
	var _achievements = {
		'storage-medallion' : 'ALL_FEATURES_VIEWED',
		'storage-trophy-cup' : 'FIRST_FEATURE',
		'storage-trophy-five' : 'SESSION_TIME',
		'storage-trophy-adobe' : 'SHARED',
		'storage-ribbon-blue' : 'BURGER'
	};
	this.name = "WebStorage";
	this.achievementObtained = new signals.Signal();
	var _doesLocalStorageExist = false;
	var _localStorage;
	var _sessionStorage;
	this.addViewedFeature = function addViewedFeature($feature) {
		if ($feature == 'welcome')
			return;
		if (Modernizr.localstorage) {
			if (!_localStorage.getItem($feature)) {
				_localStorage.setItem($feature, true);
				_localStorage.setItem($feature + '_times_viewed', 1);
			} else {
				var v = _localStorage.getItem($feature + '_times_viewed');
				_localStorage.setItem($feature + '_times_viewed', ++v);
			}
		}
	};
	this.checkMainFeatures = function checkMainFeatures() {
		_self.checkAchievement('FIRST_FEATURE');
		_self.checkAchievement('ALL_FEATURES_VIEWED');
		_updateTimestamp();
	};
	this.setAchievement = function setAchievement($name) {
		_localStorage.setItem('ACHIEVEMENT_' + $name, true);
		_self.achievementObtained.dispatch($name);
	};
	this.setMasterAchievement = function setMasterAchievement($name) {
		_localStorage.setItem('ACHIEVEMENT_MASTER_' + $name, true);
		_self.achievementObtained.dispatch('MASTER_' + $name);
	};
	this.checkAchievementStatus = function checkAchievementStatus($medal_name) {
		if (_achievements[$medal_name]) {
			return _self.hasAchievement(_achievements[$medal_name]);
		} else {
			return _localStorage.getItem('ACHIEVEMENT_MASTER_' + $medal_name);
		}
	};
	this.checkAchievement = function checkAchievement($name) {
		if (jQuery.browser.msie) {
			var maj = parseInt(jQuery.browser.version.split('.')[0]);
			if (maj < 8) {
				return;
			}
		}
		var i = 0;
		switch ($name) {
		case 'ALL_FEATURES_VIEWED':
			var cnt = 0;
			if (!_self.hasAchievement($name)) {
				for (i = 0; i < _features.length; i++) {
					if (_localStorage.getItem(_features[i])) {
						cnt++;
					}
				};
				if (cnt == _features.length) {
					_localStorage.setItem('ACHIEVEMENT_' + $name, true);
					_self.achievementObtained.dispatch($name);
				}
			}
			break;
		case 'FIRST_FEATURE':
			var cnt = 0;
			if (!_self.hasAchievement($name)) {
				for (i = 0; i < _features.length; i++) {
					if (_localStorage.getItem(_features[i])) {
						cnt++;
					}
				};
				if (cnt >= 1) {
					_localStorage.setItem('ACHIEVEMENT_' + $name, true);
					_self.achievementObtained.dispatch($name);
				}
			}
			break;
		case 'SESSION_TIME':
			if (!_self.hasAchievement($name)) {
				var sessionDelta = ((new Date()).getTime() - (new Date()).setTime(_sessionStorage.timestamp)) / 1000;
				if (sessionDelta > 1440) {
					_localStorage.setItem('ACHIEVEMENT_' + $name, true);
					_self.achievementObtained.dispatch($name);
				}
			}
			break;
		default:
			if ($name == 'drag') {
				$name = 'drag-drop';
			};
			if (!_localStorage.getItem('ACHIEVEMENT_MASTER_' + $name) && _localStorage.getItem($name + '_times_viewed')) {
				if (_localStorage.getItem($name + '_times_viewed') >= 1) {
					_localStorage.setItem('ACHIEVEMENT_MASTER_' + $name, true);
					_self.achievementObtained.dispatch('MASTER_' + $name);
				}
			}
			break;
		}
	};
	this.clear = function clear() {
		_localStorage.clear();
	};
	function _updateTimestamp() {
		if (_localStorage.timestamp) {
			_lastActivity = ((new Date()).getTime() - (new Date()).setTime(_localStorage.timestamp)) / 1000;
		}
		_localStorage.timestamp = _timestamp = (new Date()).getTime();
		_self.checkAchievement('SESSION_TIME');
	};
	this.checkAllAchievements = function checkAllAchievements() {};
	this.hasAchievement = function hasAchievement($name) {
		return _localStorage.getItem('ACHIEVEMENT_' + $name);
	};
	this.hasViewedFeature = function hasViewedFeature($feature) {
		return _localStorage.getItem($feature);
	};
	(function () {
		_doesLocalStorageExist = Modernizr.localstorage;
		if (!_doesLocalStorageExist) {
			_sessionStorage = new(function () {
					this.timestamp = '';
				})();
			_localStorage = new(function () {
					this.timestamp = '';
					this.setItem = function (key, value) {}
					this.getItem = function (key) {
						return false;
					}
					this.clear = function () {}
					
				})();
		} else {
			_localStorage = localStorage;
			_sessionStorage = sessionStorage;
		}
		_sessionStorage.timestamp = (new Date()).getTime();
	})();
	ExpressiveWeb.create(_self, {
		register : true
	});
};
models.Model = new(function () {
		var _self = this;
		this.name = "models.Model";
		this.data;
		this.featureDetection;
		this.feature;
		this.dataLoaded = new signals.Signal();
		this.notSupported = new signals.Signal();
		this.store;
		this.dragObjects = [];
		this.testMobile = false;
		this.buildTime = 'Wed Jul 27 19:07:22 EDT 2011';
		this.tmp_value = '';
		this.ignore_hash_change = false;
		this.pageTitles = {
			'css3-animations' : 'CSS3 animations - Adobe - The Expressive Web - Beta',
			'css3-gradients' : 'CSS3 gradients - Adobe - The Expressive Web - Beta',
			'css3-media-queries' : 'CSS3 media queries - Adobe - The Expressive Web - Beta',
			'css3-shadows' : 'CSS3 text shadows - Adobe - The Expressive Web - Beta',
			'css3-transforms' : 'CSS3 transform, text transform - Adobe - The Expressive Web - Beta',
			'css3-transitions' : 'CSS3 transitions - Adobe - The Expressive Web - Beta',
			'css3-web-fonts' : 'CSS3 Web Fonts – Adobe – The Expressive Web - Beta',
			'html5-audio' : 'HTML5 audio player and element - Adobe - The Expressive Web - Beta',
			'html5-canvas' : 'HTML5 canvas element - Adobe - The Expressive Web - Beta',
			'html5-forms' : 'HTML5 forms - Adobe - The Expressive Web - Beta',
			'html5-video' : 'HTML5 video media player - Adobe - The Expressive Web - Beta',
			'html5-web-storage' : 'HTML5 web storage - Adobe - The Expressive Web - Beta',
			'welcome' : 'HTML5 and CSS3 - Adobe - The Expressive Web - Beta'
		};
		var _featureCompatibility = {};
		this.getDataForFeature = function getDataForFeature($feature) {
			if (_self.feature !== $feature) {
				_self.feature = $feature;
				_self.store.addViewedFeature($feature);
				$.ajax({
					url : BASEURL + 'js/features/' + $feature + '.json',
					type : 'HEAD',
					error : function () {
						_self.ignore_hash_change = false;
					},
					success : function () {
						$.getJSON(BASEURL + 'js/features/' + $feature + '.json', _handleJSON);
						_self.ignore_hash_change = false;
					}
				});
			}
			return false;
		};
		this.checkFeatureCompatibility = function checkFeatureCompatibility() {
			return _featureCompatibility[_self.data.controller];
		};
		this.checkSpecificFeatureCompatibility = function checkSpecificFeatureCompatibility($feature) {
			return _featureCompatibility[$feature];
		};
		this.featureNotSupported = function featureNotSupported($name_list) {
			_self.notSupported.dispatch($name_list);
		};
		this.checkMajorVersionFor = function checkMajorVersionFor($name, $version) {
			var ret = true;
			if (jQuery.browser[$name]) {
				var maj = parseInt(jQuery.browser.version.split('.')[0]);
				if (maj < $version) {
					ret = false;
				}
			}
			return ret;
		};
		this.checkMasterAchievement = function checkMasterAchievement($name) {
			if (!_self.store.checkAchievementStatus($name)) {
				_self.store.setMasterAchievement($name);
			}
		};
		this.addDragObject = function addDragObject($id) {
			_self.dragObjects.push($id);
		};
		function _handleJSON($data) {
			_self.data = $data[0];
			_self.dataLoaded.dispatch();
		};
		function _checkAllFeatureCompatibilities() {
			_featureCompatibility['animations'] = Modernizr.cssanimations;
			_featureCompatibility['gradients'] = Modernizr.cssgradients;
			_featureCompatibility['selectors'] = Modernizr.mq('(min-width: 0px)');
			_featureCompatibility['shadows'] = Modernizr.boxshadow;
			_featureCompatibility['transforms'] = Modernizr.csstransforms;
			_featureCompatibility['transitions'] = Modernizr.csstransitions;
			_featureCompatibility['fonts'] = Modernizr.fontface;
			_featureCompatibility['audio'] = Modernizr.audio;
			_featureCompatibility['canvas'] = Modernizr.canvas;
			_featureCompatibility['forms'] = true;
			_featureCompatibility['video'] = Modernizr.video;
			_featureCompatibility['touch'] = true;
			_featureCompatibility['web-storage'] = Modernizr.localstorage;
			if (jQuery.browser.mobile) {
				_featureCompatibility['drag'] = false;
			} else {
				_featureCompatibility['drag'] = Modernizr.draganddrop;
			}
		};
		this.construct = function construct() {
			_self.store = new WebStorage();
		};
		this.init = function init() {
			_checkAllFeatureCompatibilities();
		};
		return ExpressiveWeb.create(_self, {
			construct : 'construct',
			init : 'init'
		});
	})();
function Controller($model) {
	var _self = this;
	var _model;
	this.name = "Controller";
	this.getDataForFeature = function getDataForFeature($feature) {
		_model.getDataForFeature($feature);
	};
	this.getFeatureDetection = function getFeatureDetection($feature) {
		_model.getFeatureDetection($feature);
	};
	(function () {
		_model = $model;
	})();
	return ExpressiveWeb.create(_self, {
		register : true
	});
};
function DemoController($model) {
	var _self = this;
	var _model;
	var _scene_active = '';
	var _demo = {};
	this.demo_controllers = {};
	this.name = "DemoController";
	this.audioEnded = new signals.Signal();
	this.boom = new signals.Signal();
	this.capPrefix = '';
	function sceneIsNew($scene) {
		var return_value = false
			if (_scene_active !== $scene) {
				return_value = true;
			}
			return return_value;
	}
	function demoStart($scene) {
		if (sceneIsNew($scene)) {
			_self.demoStop($scene);
			_scene_active = $scene;
		}
	}
	this.updateWebStorage = function updateWebStorage() {
		if (_self.demo_controllers['web-storage']) {
			_self.demo_controllers['web-storage'].updateTitles();
		}
	};
	this.featureNotSupported = function featureNotSupported($name_list) {
		_self.demo_controllers['legacy'].featureNotSupported($name_list);
	};
	this.sceneLoaded = function () {
		if (!$('#demo-html').length) {
			$('#landscape').append('<div id="demo-html"></div>');
		}
		demoStart(REQUEST_SCREEN);
		if (!_self.demo_controllers[REQUEST_SCREEN]) {
			switch (REQUEST_SCREEN) {
			case 'animations':
			case 'gradients':
			case 'shadows':
			case 'transforms':
			case 'transitions':
			case 'fonts':
			case 'drag':
			case 'audio':
			case 'canvas':
			case 'forms':
			case 'video':
			case 'touch':
			case 'web-storage':
				var prefix = REQUEST_SCREEN;
				if (prefix == 'web-storage') {
					prefix = 'storage';
				}
				_self.capPrefix = prefix.charAt(0).toUpperCase() + prefix.slice(1);
				ExpressiveWeb.flush();
				var includeMethod = ExpressiveWeb['include'];
				if (DEBUG_JS) {
					includeMethod(BASEURL + 'js/com/adobe/controllers/demos/' + _self.capPrefix + 'Controller.js');
				} else {
					includeMethod(BASEURL + 'js/' + _self.capPrefix + 'Controller.min.js');
				}
				ExpressiveWeb.complete(function () {
					_instantiateController(_self.capPrefix + 'Controller');
				});
				break;
			}
		}
		if (_self.demo_controllers[REQUEST_SCREEN]) {
			_self.demo_controllers[REQUEST_SCREEN].init();
			if (REQUEST_SCREEN == 'animations') {
				setTimeout(_reallyStartAnimations, 1500);
			}
		} else if (REQUEST_SCREEN == 'selectors') {
			if (!_model.checkFeatureCompatibility()) {
				_model.featureNotSupported(['CSS3 Media Queries']);
				return;
			}
		}
	};
	function _instantiateController($className) {
		_self.demo_controllers[REQUEST_SCREEN] = new window[$className](_model);
		_self.demo_controllers[REQUEST_SCREEN].init();
		if ($className == 'AudioController') {
			_self.demo_controllers['audio'].audioEnded.add(_audioEnded_handler);
		}
		if ($className == 'TransformsController') {
			_self.demo_controllers['transforms'].blowup.add(_boom_handler);
		}
		if ($className == 'AnimationsController') {
			setTimeout(_reallyStartAnimations, 1500);
		}
	};
	this.updated = function ($control) {
		if (_self.demo_controllers[REQUEST_SCREEN]) {
			_self.demo_controllers[REQUEST_SCREEN].updateValue($control);
		}
	};
	this.demoStop = function ($scene) {
		if ($scene === undefined) {
			$scene = REQUEST_SCREEN;
		}
		if (!sceneIsNew($scene)) {
			if (_demo.audio !== undefined) {
				for (var i = 0; i < _demo.audio.length; i++) {
					_demo.audio[i].file.pause();
					_demo.audio[i].file = {};
				}
			}
			_demo = {};
			$('#demo-html').html('');
			if (_self.demo_controllers[REQUEST_SCREEN]) {
				_self.demo_controllers[REQUEST_SCREEN].stop();
			}
		}
	};
	this.removeLegacy = function removeLegacy() {
		_self.demo_controllers['legacy'].animateOut();
	};
	this.startAnimations = function startAnimations() {
		if (_self.demo_controllers['animations'] && !_self.demo_controllers['animations'].running) {
			setTimeout(_reallyStartAnimations, 1200);
		}
	};
	function _reallyStartAnimations() {
		_self.demo_controllers['animations'].startAnimations();
	};
	function _audioEnded_handler($name) {
		_self.audioEnded.dispatch($name);
	};
	function _boom_handler() {
		_self.boom.dispatch();
	};
	(function () {
		_model = $model;
		_self.demo_controllers['legacy'] = new LegacyFeatureController(_model);
	})();
	return ExpressiveWeb.create(_self, {
		register : true,
		extend : 'Controller'
	});
};
function DescriptionController($model) {
	var _self = this;
	var _model;
	var _scene_active = '';
	this.name = "DescriptionController";
	this.animateInCompleted = new signals.Signal();
	this.descriptionAnimateIn = function () {
		descriptionAdd(_model.data.controller);
		setTimeout(_activate, 1);
	}
	this.descriptionAnimateOut = function () {
		if (!_model.checkSpecificFeatureCompatibility('transitions')) {
			$('#description-' + REQUEST_SCREEN).animate({
				bottom : -216
			}, function () {
				$('#description-' + REQUEST_SCREEN).removeClass('active');
			});
		} else {
			$('#description-' + REQUEST_SCREEN).removeClass('active');
		}
	}
	function _activate() {
		$('#description-' + _model.data.controller).addClass('active');
		if (!_model.checkSpecificFeatureCompatibility('transitions')) {
			$('#description-' + _model.data.controller).animate({
				bottom : 81
			}, function () {
				$('#description-' + _model.data.controller).addClass('active');
			});
		} else {
			$('#description-' + _model.data.controller).addClass('active');
		}
		setTimeout(_dispatch, 700);
	};
	function _dispatch() {
		_self.animateInCompleted.dispatch();
	};
	function descriptionExists($scene) {
		var return_value = false;
		if ($('#description-' + $scene).length) {
			return_value = true;
		}
		return return_value;
	}
	function descriptionAdd($scene, $options) {
		if (!descriptionExists($scene)) {
			if (!$('#demo-description').length) {
				$('#landscape').append('<div id="demo-description"></div>');
			}
			if ($scene != 'welcome') {
				$('#demo-description').append('<div id="description-' + $scene + '" class="description"><div class="description-close">close description</div><p>' + _model.data.description + '</p></div>');
				$('.description-close').click(descriptionClicked);
			}
		}
	}
	function descriptionClicked($event) {
		var description = $($event.target);
		if ($($event.target).is('.description-close')) {
			description = $($event.target).closest('.description');
		}
		if (!description.hasClass('closed')) {
			if (!_model.checkSpecificFeatureCompatibility('transitions')) {
				description.animate({
					bottom : -133
				}, function () {
					description.addClass('closed');
				});
			} else {
				description.addClass('closed');
			}
		} else {
			if (!_model.checkSpecificFeatureCompatibility('transitions')) {
				description.animate({
					bottom : 81
				}, function () {
					description.removeClass('closed');
				});
			} else {
				description.removeClass('closed');
			}
		}
	}
	this.init = function init($model) {
		_self._model = $model;
	};
	(function () {
		_model = $model;
	})();
	return ExpressiveWeb.create(_self, {
		register : true,
		extend : 'Controller'
	});
};
function LabelController($model) {
	var _self = this;
	var _model;
	var _scene_active = '';
	this.name = "LabelController";
	this.labelAnimateIn = function () {
		labelAdd(_model.data.controller);
		setTimeout(_activate, 1);
	}
	this.labelAnimateOut = function () {
		$('#label-' + REQUEST_SCREEN).removeClass('active');
	}
	function _activate() {
		$('#label-' + _model.data.controller).addClass('active');
	};
	function labelExists($scene) {
		var return_value = false;
		if ($('#label-' + $scene).length) {
			return_value = true;
		}
		return return_value;
	}
	function labelAdd($scene, $options) {
		if (!labelExists($scene)) {
			if (!$('#demo-label').length) {
				$('#landscape').append('<div id="demo-label"></div>');
			}
			if ($scene != 'welcome') {
				if (_model.data.browser_support[0].label == 'CSS3 Box Shadows') {
					_model.data.browser_support[0].label = 'CSS3 Shadows';
				}
				$('#demo-label').append('<div id="label-' + $scene + '" class="label">' + _model.data.browser_support[0].label + '</div>');
				$('#label-' + $scene).click(labelClicked);
			}
		}
	}
	function labelClicked($event) {
		var scene = $(event.target).attr('id').replace('label-', '');
		$('#description-' + scene).addClass('active');
	}
	this.init = function init($model) {
		_self._model = $model;
	};
	(function () {
		_model = $model;
	})();
	return ExpressiveWeb.create(_self, {
		register : true,
		extend : 'Controller'
	});
};
function LandscapeController($model) {
	var _self = this;
	var _model;
	var _scene_active = '';
	var _assets = [];
	var _cubes = [];
	var divs = [];
	var _currentAsset = 0;
	var STATE = 'IN';
	var _blockBuilders = [];
	var _snapOn = false;
	this.name = "LandscapeController";
	this.animateOutCompleted = new signals.Signal();
	this.animateInCompleted = new signals.Signal();
	this.canUseCSSTransitions = false;
	function sceneExists($scene) {
		var return_value = false
			if ($('#cubes .scene-' + $scene).length) {
				return_value = true;
			}
			return return_value;
	};
	function _display($name, $x, $y, $z, $divs) {
		$('.scene').append('<div id="asset-' + $name + '" class="asset"></div>');
		$('#asset-' + $name).css({
			left : Number($x),
			top : Number($y),
			zIndex : Number($z)
		});
		var jqo = $('#asset-' + $name);
		for (var i = 0; i < $divs.length; i++) {
			$($divs[i]).appendTo(jqo);
		};
		var asset = {};
		asset.name = $name;
		asset.html = $('#asset-' + $name).html();
		asset.x = Number($x);
		asset.y = Number($y);
		var duration = 10;
		if ($name == 'welcome-expressive') {
			duration = 20;
			if (jQuery.browser.firefox) {
				duration = 5;
			}
		}
		if (!_model.checkMajorVersionFor('msie', 9)) {
			duration = 5
		};
		assetAnimateIn(asset, duration);
	};
	function _remove($name) {
		var asset = {};
		asset.name = $name;
		asset.html = $('#asset-' + $name).html();
		var duration = 10;
		if ($name == 'welcome-expressive') {
			duration = 20;
			if (jQuery.browser.firefox) {
				duration = 5;
			}
		}
		if (!_model.checkMajorVersionFor('msie', 9)) {
			duration = 5
		};
		assetAnimateOut(asset, duration);
	};
	function _createAssetsForCanvas() {
		for (var i = 0; i < _cubes.length; i++) {
			var bb = new AssetBuilder($('<canvas id="' + _cubes[i].name + '"></canvas>'), _cubes[i].data).load({
					left : _cubes[i].x,
					top : _cubes[i].y,
					z : _cubes[i].z
				});
			bb.animateInCompleted.add(_canvasBlocksIn);
			bb.animateOutCompleted.add(_canvasBlocksOut);
			_blockBuilders.push(bb);
		};
	};
	this.removeCanvasAssets = function removeCanvasAssets() {
		for (var i = 0; i < _blockBuilders.length; i++) {
			_blockBuilders[i].remove();
		};
		_currentAsset = 0;
		_blockBuilders = [];
		_assets = [];
	};
	function _canvasBlocksIn() {
		_currentAsset++;
		if (_currentAsset == _cubes.length) {
			_currentAsset = 0;
			_self.animateInCompleted.dispatch();
		}
	};
	function _canvasBlocksOut() {};
	function _checkAchievementStatus($medal_name) {
		return _model.store.checkAchievementStatus($medal_name);
	};
	function _setTransitionStyle() {
		switch (_model.data.controller) {
		case 'welcome':
			_self.canUseCSSTransitions = false;
			break;
		default:
			_self.canUseCSSTransitions = Modernizr.csstransitions;
			break;
		}
		if (jQuery.browser.firefox) {
			var maj = parseInt(jQuery.browser.version.split('.')[0]);
			if (maj < 5) {
				_self.canUseCSSTransitions = false;
			};
		};
		if (jQuery.browser.mobile || _model.testMobile) {
			_self.canUseCSSTransitions = false;
			_snapOn = true;
		}
		if (jQuery.browser.msie) {
			var maj = parseInt(jQuery.browser.version.split('.')[0]);
			if (maj < 8) {
				_self.canUseCSSTransitions = false;
				_snapOn = true;
			};
		}
		if (jQuery.browser.opera && REQUEST_SCREEN === 'welcome') {
			_self.canUseCSSTransitions = false;
			_snapOn = true;
		}
	};
	function _createDivs() {
		_setTransitionStyle();
		var side = Math.floor(Math.random() * 4);
		var updateSide = true;
		if (_model.data.controller == 'video' || _model.data.controller == 'drag' || _model.data.controller == 'forms') {
			updateSide = false;
		}
		var CUBE_COUNT = 0;
		for (var i = 0; i < _cubes.length; i++) {
			if (updateSide) {
				side = Math.floor(Math.random() * 4);
			}
			var name = _cubes[i].name;
			var x = _cubes[i].x;
			var y = _cubes[i].y;
			var z = _cubes[i].z;
			var data = _cubes[i].data.split('|');
			CUBE_COUNT += data.length;
			var isGrey = false;
			switch (name) {
			case 'storage-medallion':
			case 'storage-trophy-cup':
			case 'storage-trophy-five':
			case 'storage-trophy-adobe':
			case 'storage-ribbon-blue':
				isGrey = (_checkAchievementStatus(name) == null) ? true : false;
				break;
			}
			if (!_self.canUseCSSTransitions) {}
			else {
				$('.scene').append('<div id="asset-' + name + '" class="asset"></div>');
				$('#asset-' + name).css({
					left : Number(x),
					top : Number(y),
					zIndex : Number(z)
				});
			}
			if (_snapOn) {
				$('.scene').append('<div id="asset-' + name + '" class="asset"></div>');
				$('#asset-' + name).css({
					left : Number(x),
					top : Number(y),
					zIndex : Number(z)
				});
			}
			for (var ii = 0; ii < data.length; ii++) {
				var parts = data[ii].split('.');
				var color = parts[0];
				var background_position = {
					x : Math.floor(Math.random() * 7) * -28,
					y : 0
				}
				if ((_model.data.controller != 'welcome' && !_model.checkFeatureCompatibility()) || (_model.data.controller === 'forms' && jQuery.browser.msie && jQuery.browser.version < 9)) {
					color = 'tan';
					background_position.y = -197;
				} else {
					if (isGrey) {
						color = 'tan';
						background_position.x = 0;
						background_position.y = -197;
					} else {
						switch (color) {
						case 'P':
							color = 'pink';
							background_position.y = -84;
							break;
						case 'O':
							color = 'orange';
							background_position.y = -28;
							break;
						case 'R':
							color = 'red';
							background_position.y = -112;
							break;
						case 'B':
							color = 'blue';
							background_position.y = 0;
							break;
						case 'Y':
							color = 'yellow';
							background_position.y = -140;
							break;
						case 'G':
							color = 'green';
							background_position.y = -56;
							break;
						case 'T':
							color = 'tan';
							background_position.y = -197;
							break;
						case 'BR':
							color = 'brown';
							background_position.y = -225;
							break;
						}
					}
				}
				if (_model.data.controller == 'touch' && (!_model.checkFeatureCompatibility() || !_model.checkSpecificFeatureCompatibility('canvas'))) {
					color = 'tan';
					background_position.y = -197;
				}
				var id = parts[1];
				var top = parts[2];
				var left = parts[3];
				var zed = parts[4];
				var random_offset = 0;
				if (!_self.canUseCSSTransitions) {
					var div;
					if (_snapOn) {
						div = '<div class="cube color-' + color + '" id="' + name + '-' + id + '" style="visibility:visible; top:' + top + 'px; left:' + left + 'px; z-index:' + zed + '; background-position: ' + background_position.x + 'px ' + background_position.y + 'px"></div>';
						$('#asset-' + name).append(div);
					} else {
						div = '<div class="cube color-' + color + '" id="' + name + '-' + id + '" style="top:' + top + 'px; left:' + left + 'px; z-index:' + zed + '; background-position: ' + background_position.x + 'px ' + background_position.y + 'px"></div>';
						divs.push(div);
					}
				} else {
					var cube = $('#asset-' + name).append('<div id="' + name + '-' + id + '" class="cube color-' + color + '"></div>').find('#' + name + '-' + id)[0];
					var r_top;
					switch (side) {
					case 0:
						r_top = parseInt(top) + Math.floor(Math.random() * 501 - 250);
						$(cube).css('top', (r_top - 1200) + 'px');
						$(cube).css('left', (parseInt(left) - $(window).width()) + 'px');
						break;
					case 1:
						r_top = parseInt(top) + Math.floor(Math.random() * 501 - 250);
						$(cube).css('top', (r_top - 1200) + 'px');
						$(cube).css('left', (parseInt(left) + $(window).width()) + 'px');
						break;
					case 2:
						r_top = parseInt(top) + Math.floor(Math.random() * 501 - 250);
						$(cube).css('top', (r_top + 1200) + 'px');
						$(cube).css('left', (parseInt(left) + $(window).width()) + 'px');
						break;
					case 3:
						r_top = parseInt(top) + Math.floor(Math.random() * 501 - 250);
						$(cube).css('top', (r_top + 1200) + 'px');
						$(cube).css('left', (parseInt(left) - $(window).width()) + 'px');
						break;
					}
					$(cube).css('background-position', background_position.x + 'px ' + background_position.y + 'px');
					$(cube).css('visibility', 'visible');
					$(cube).css('-webkit-transition-property', 'top, left, opacity, -webkit-transform');
					$(cube).css('-webkit-transition-duration', Math.floor(Math.random() * 1000 + 250) + 'ms');
					$(cube).css('-webkit-transition-timing-function', 'cubic-bezier(0.705, 0.000, 0.385, 1.000)');
					$(cube).css('-moz-transition-property', 'top, left, opacity, -moz-transform');
					$(cube).css('-moz-transition-duration', Math.floor(Math.random() * 1000 + 250) + 'ms');
					$(cube).css('-moz-transition-timing-function', 'cubic-bezier(0.705, 0.000, 0.385, 1.000)');
					$(cube).css('-o-transition-property', 'top, left, opacity, -o-transform');
					$(cube).css('-o-transition-duration', Math.floor(Math.random() * 1000 + 250) + 'ms');
					$(cube).css('-o-transition-timing-function', 'cubic-bezier(0.705, 0.000, 0.385, 1.000)');
					if (jQuery.browser.firefox) {
						setTimeout(_animatePosition, (i + 5) * 300, cube, top, left, zed);
					} else {
						setTimeout(_animatePosition, (i + 1) * 200, cube, top, left, zed);
					}
				}
			};
			if (!_self.canUseCSSTransitions) {
				_assets.push({
					name : name,
					x : x,
					y : y,
					z : z,
					divs : divs
				});
				divs = [];
			} else {
				if (_model.data.controller == 'web-storage') {
					_assets.push({
						name : name,
						x : x,
						y : y,
						z : z,
						divs : divs
					});
				}
			}
		};
		if (!_self.canUseCSSTransitions) {
			if (_snapOn) {
				setTimeout(_dispatchIn, 100);
			}
		} else {
			var t = i * 300;
			switch (_model.data.controller) {
			case 'animations':
			case 'gradients':
			case 'drag':
				t += 200;
				break;
			case 'video':
				t = 1900;
				break;
			}
			setTimeout(_dispatchIn, t);
		}
	};
	function _removeDivs() {
		_assets = [];
		var side = Math.floor(Math.random() * 2);
		for (var i = 0; i < _cubes.length; i++) {
			var name = _cubes[i].name;
			var r_top;
			var r_left;
			var z_index;
			$('#asset-' + name + ' .cube').each(function () {
				r_top = parseInt($(this).css('top').replace('px', '')) + Math.floor(Math.random() * 1001 - 500);
				z_index = $(this).css('z-index').replace('px', '');
				switch (side) {
				case 0:
					r_left = parseInt($(this).css('left').replace('px', '')) + $(window).width();
					break;
				case 1:
					r_left = parseInt($(this).css('left').replace('px', '')) - $(window).width();
					break;
				}
				setTimeout(_animatePosition, 1, this, r_top, r_left, z_index);
			});
		}
		setTimeout(_dispatchOut, (i * 150) + 250);
	};
	function _animatePosition($div, $top, $left, $zed) {
		$($div).css('top', $top + "px");
		$($div).css('left', $left + "px");
		$($div).css('zIndex', $zed);
	};
	function _dispatchIn() {
		_self.animateInCompleted.dispatch();
	};
	function _dispatchOut() {
		for (var i = 0; i < _cubes.length; i++) {
			$('#asset-' + _cubes[i].name).each(function () {
				$(this).remove();
			});
		}
		_self.animateOutCompleted.dispatch();
	};
	function assetAnimateIn($asset, $duration) {
		if ($asset.animation_counter === undefined) {
			$asset.animation_counter = 0;
		}
		if ($asset.cube_count === undefined) {
			$asset.cube_count = $('#asset-' + $asset.name + ' .cube').length;
		}
		if ($duration === undefined) {
			$duration = 0.5;
		}
		var timeout = 1;
		var iterator = 1;
		var duration = $duration * 10;
		if (duration > $asset.cube_count) {
			timeout = Math.ceil(duration / $asset.cube_count);
			iterator = 1;
		} else {
			timeout = 1;
			iterator = Math.round($asset.cube_count / duration);
		}
		$('#asset-' + $asset.name + ' .cube').slice($asset.animation_counter, $asset.animation_counter + iterator).css({
			visibility : 'visible'
		});
		if ($asset.animation_counter < $asset.cube_count) {
			$asset.animation_counter += iterator;
			setTimeout(function () {
				assetAnimateIn($asset, $duration)
			}, timeout);
		} else {
			_currentAsset++;
			if (_currentAsset != _assets.length) {
				var asset = _assets[_currentAsset];
				_display(asset.name, asset.x, asset.y, asset.z, asset.divs);
			} else {
				STATE = 'OUT';
				_currentAsset = 0;
				_self.animateInCompleted.dispatch();
			}
		}
	};
	function assetAnimateOut($asset, $duration) {
		if ($asset.cube_count === undefined) {
			$asset.cube_count = $('#asset-' + $asset.name + ' .cube').length;
		}
		if ($asset.animation_counter === undefined) {
			$asset.animation_counter = $asset.cube_count - 1;
		}
		if ($duration === undefined) {
			$duration = 0.5;
		}
		var timeout = 1;
		var iterator = 1;
		var duration = $duration * 10;
		if (duration > $asset.cube_count) {
			timeout = Math.ceil(duration / $asset.cube_count);
			iterator = 1;
		} else {
			timeout = 1;
			iterator = Math.round($asset.cube_count / duration);
		}
		$('#asset-' + $asset.name + ' .cube').slice($asset.animation_counter, $asset.animation_counter + iterator).remove();
		if ($asset.animation_counter > 0) {
			$asset.animation_counter -= iterator;
			setTimeout(function () {
				assetAnimateOut($asset, $duration)
			}, timeout);
		} else {
			_currentAsset++;
			if (_currentAsset != _assets.length) {
				$('#asset-' + $asset.name).remove();
				var asset = _assets[_currentAsset];
				_remove(asset.name);
			} else {
				$('#asset-' + $asset.name).remove();
				STATE = 'IN';
				_assets = [];
				_currentAsset = 0;
				_self.animateOutCompleted.dispatch();
			}
		}
	};
	function assetSetSize($asset) {
		var offset = {};
		offset.x = $(window).width();
		offset.y = $(window).height();
		var size = {};
		size.width = 0;
		size.height = 0;
		var cube_count = $('#asset-' + $asset.name + ' .cube').length;
		$('#asset-' + $asset.name + ' .cube').each(function () {
			if (Number($(this).css('top').replace('px', '')) < offset.y) {
				offset.y = Number($(this).css('top').replace('px', ''));
			}
			if (Number($(this).css('left').replace('px', '')) < offset.x) {
				offset.x = Number($(this).css('left').replace('px', ''));
			}
			if (Number($(this).css('top').replace('px', '')) > size.height) {
				size.height = Number($(this).css('top').replace('px', '')) + 42;
			}
			if (Number($(this).css('left').replace('px', '')) > size.width) {
				size.width = Number($(this).css('left').replace('px', '')) + 21;
			}
		});
		$asset.offset = offset;
		$asset.size = size;
		$asset.cube_count = cube_count;
		return {
			offset : offset,
			size : size,
			cube_count : cube_count
		};
	}
	function assetCubesShift($asset) {
		if ($asset.offset !== undefined) {
			if ($asset.offset.x !== 0 || $asset.offset.y !== 0) {
				$('#asset-' + $asset.name + ' .cube').each(function () {
					var left_new = Number($(this).css('left').replace('px', '')) - $asset.offset.x;
					var top_new = Number($(this).css('top').replace('px', '')) - $asset.offset.y;
					$(this).css({
						left : left_new,
						top : top_new
					});
				});
			}
		}
		if ($asset.size !== undefined) {
			$asset.size.width -= $asset.offset.x;
			$asset.size.height -= $asset.offset.y;
			$('#asset-' + $asset.name).css({
				width : $asset.size.width,
				height : $asset.size.height
			});
		}
	}
	this.animateOut = function animateOut() {
		if (TRANSITION_STYLE == 'canvas' && REQUEST_SCREEN != 'animations' && REQUEST_SCREEN != 'transitions') {
			_self.removeCanvasAssets();
			_self.animateOutCompleted.dispatch();
		} else {
			if (!_self.canUseCSSTransitions) {
				if (_snapOn) {
					$('.scene .asset').each(function () {
						$(this).remove();
					});
					_self.animateOutCompleted.dispatch();
					return;
				}
				_assets = [];
				$('.scene .asset').each(function () {
					var asset = {};
					asset.name = $(this).attr('id').replace('asset-', '');
					asset.html = $(this).html();
					_assets[_assets.length] = asset;
				});
				if (_assets.length) {
					var asset = _assets[_currentAsset];
					_remove(asset.name);
				} else {
					_self.animateOutCompleted.dispatch();
				}
			} else {
				_removeDivs();
			}
		}
	};
	this.redrawAchievement = function redrawAchievement($name) {
		var lookup = {
			'ALL_FEATURES_VIEWED' : 'storage-medallion',
			'FIRST_FEATURE' : 'storage-trophy-cup',
			'SESSION_TIME' : 'storage-trophy-five',
			'SHARED' : 'storage-trophy-adobe',
			'BURGER' : 'storage-ribbon-blue'
		};
		for (var i = 0; i < _assets.length; i++) {
			if (_assets[i].name == lookup[$name]) {
				var data = _cubes[i].data.split('|');
				var ii = 0;
				$('#asset-' + _assets[i].name).children().each(function () {
					var background_position = {
						x : Math.floor(Math.random() * 7) * -28,
						y : 0
					}
					var parts = data[ii].split('.');
					var color = parts[0];
					switch (data[ii].substr(0, 1)) {
					case 'P':
						color = 'pink';
						background_position.y = -84;
						break;
					case 'O':
						color = 'orange';
						background_position.y = -28;
						break;
					case 'R':
						color = 'red';
						background_position.y = -112;
						break;
					case 'B':
						color = 'blue';
						background_position.y = 0;
						break;
					case 'Y':
						color = 'yellow';
						background_position.y = -140;
						break;
					case 'G':
						color = 'green';
						background_position.y = -56;
						break;
					case 'T':
						color = 'tan';
						background_position.y = -197;
						break;
					case 'BR':
						color = 'brown';
						background_position.y = -225;
						break;
					}
					var id = parts[1];
					var top = parts[2];
					var left = parts[3];
					var zed = parts[4];
					$(this).attr('class', 'cube color-' + color);
					$(this).attr('style', 'top:' + top + 'px; left:' + left + 'px; z-index:' + zed + '; background-position: ' + background_position.x + 'px ' + background_position.y + 'px');
					$(this).css('visibility', 'visible');
					ii++;
				});
				break;
			}
		};
	};
	this.sceneLoad = function sceneLoad() {
		var scene = _model.data.controller;
		_cubes = _model.data.assets;
		if (TRANSITION_STYLE == 'canvas' && _model.data.controller != 'animations' && _model.data.controller != 'transitions') {
			_createAssetsForCanvas();
		} else {
			_createDivs();
			if (!_self.canUseCSSTransitions) {
				if (_assets.length) {
					if (!_snapOn) {
						var asset = _assets[_currentAsset];
						_display(asset.name, asset.x, asset.y, asset.z, asset.divs);
					}
				}
			}
		}
	};
	(function () {
		_model = $model;
		$('#cubes').append('<div class="scene"></div>');
	})();
	return ExpressiveWeb.create(_self, {
		register : true
	});
};
function LegacyFeatureController($model) {
	var _self = this;
	var _model;
	var _isIn = false;
	this.name = "LegacyFeatureController";
	this.featureNotSupported = function featureNotSupported($name_list) {
		$('.unsupported').remove();
		var unsupported;
		if ($name_list.length == 1) {
			unsupported = $('<div class="unsupported" id="unsupported-' + REQUEST_SCREEN + '"><p>This demo requires support for <span>' + $name_list[0] + '</span>.</p><p>It appears that your browser does not support this feature.</p></div>');
		} else {
			var list = '';
			for (var i = 0; i < $name_list.length; i++) {
				if (i == $name_list.length - 1) {
					list += $name_list[i];
				} else {
					list += $name_list[i] + ', ';
				}
			};
			unsupported = $('<div class="unsupported" id="unsupported-' + REQUEST_SCREEN + '"><p>This demo requires support for: <span>' + list + '</span>.</p><p>It appears that your browser does not support these features.</p></div>');
		}
		if (!$('#demo-description').length) {
			!$('#landscape').append('<div id="demo-description"></div>');
		}
		unsupported.prependTo('#demo-description');
		setTimeout(_animateIn, 150);
		unsupported.click(_unsupportedClick_handler);
	};
	this.animateOut = function animateOut() {
		if ($('.unsupported').hasClass('active')) {
			$('.unsupported').removeClass('active');
		}
	};
	function _animateIn() {
		$('.unsupported').addClass('active');
	};
	function _unsupportedClick_handler() {};
	function _onAnimateInLegacy_handler() {
		_isIn = true;
	};
	function _onAnimateOutLegacy_handler() {
		_isIn = false;
	};
	(function () {
		_model = $model;
	})();
	return ExpressiveWeb.create(_self, {
		register : true,
		extend : 'Controller'
	});
};
function OverlayController($model) {
	var _self = this;
	var _model;
	var _scene_active = '';
	var _controls = [];
	this.name = "OverlayController";
	this.updated = new signals.Signal();
	this.loaded = new signals.Signal();
	this.overlayAnimateIn = function () {
		if (_model.data.controller == 'video' && jQuery.browser.iphone) {
			return;
		}
		if (_model.data.controller != 'welcome') {
			if (_model.data.controller == 'touch' && (!_model.checkFeatureCompatibility() || !_model.checkSpecificFeatureCompatibility('canvas'))) {}
			else if (_model.checkFeatureCompatibility()) {
				overlayAdd(_model.data.controller, _model.data.controls);
				$('#overlay-' + _model.data.controller).slideDown();
			}
		}
	}
	this.overlayAnimateOut = function () {
		$('#overlay-' + REQUEST_SCREEN).slideUp();
	}
	function overlayExists($scene) {
		var return_value = false;
		if ($('#overlay-' + $scene).length) {
			return_value = true;
		}
		return return_value;
	}
	function overlayAdd($scene, $options) {
		if (!overlayExists($scene)) {
			if (!$('#demo-overlay').length) {
				$('#landscape').append('<div id="demo-overlay"></div>');
			}
			var instruction = 'Change Values here...';
			if (_model.data.overlay_instruction !== undefined) {
				instruction = _model.data.overlay_instruction;
			}
			$('#demo-overlay').append('<div id="overlay-' + $scene + '" class="overlay"><div class="overlay-title">overlay ' + $scene + '</div></div>');
			$('#overlay-' + $scene).append('<div class="overlay-description">' + instruction + '</div>');
			if (_model.data.controller === 'gradients') {
				$('#overlay-' + $scene).append('<div id="gradient-pickers" />');
			}
			if ($options !== undefined && $options.length > 0) {
				for (var i = 0; i < $options.length; i++) {
					(function (i) {
						var optionData = $options[i];
						var control = {}
						control.type = optionData.type;
						control.id = optionData.id;
						if (control.type === 'slider') {
							control.value = optionData.value;
							control.min = optionData.min;
							control.max = optionData.max;
							control.id = optionData.id;
							control.step = 1;
							control.text = optionData.text;
							control.unit = optionData.unit;
							if (optionData.step !== 1 && optionData.step !== undefined) {
								control.step = optionData.step;
							}
							if ($('body').hasClass('browser-webkit') && !jQuery.browser.mobile) {
								control.object = $('#overlay-' + $scene).append('<input type="range" step="' + control.step + '" min="' + control.min + '" max="' + control.max + '" value="' + control.value + '" id="control-' + $scene + '-' + control.id + '" class="control control-' + control.type + '" />').find('#control-' + $scene + '-' + control.id)[0];
								if ($scene == 'video') {
									control.object.addEventListener('mousedown', function () {
										_self.updated.dispatch({
											type : 'sliderdown'
										});
									}, null, false);
									control.object.addEventListener('mouseup', function () {
										_self.updated.dispatch({
											type : 'sliderup',
											value : control.object.value
										});
										if (control.text !== undefined && optionData.show_value_on_label !== undefined) {
											$('label[for="control-' + $scene + '-' + control.id + '"]').html('<p class="label-slider-key">' + control.text + '</p><p class="label-slider-value">' + control.object.value + control.unit + '</p>');
										}
									}, null, false);
									control.object.addEventListener('change', function () {
										if (control.text !== undefined && optionData.show_value_on_label !== undefined) {
											$('label[for="control-' + $scene + '-' + control.id + '"]').html('<p class="label-slider-key">' + control.text + '</p><p class="label-slider-value">' + control.object.value + control.unit + '</p>');
										}
									}, null, false);
								} else {
									control.object.addEventListener('change', function () {
										_self.updated.dispatch(control);
										if (control.text !== undefined && optionData.show_value_on_label !== undefined) {
											$('label[for="control-' + $scene + '-' + control.id + '"]').html('<p class="label-slider-key">' + control.text + '</p><p class="label-slider-value">' + control.object.value + control.unit + '</p>');
										}
									}, null, false);
								}
							} else {
								control.object = $('#overlay-' + $scene).append('<div id="control-' + $scene + '-' + control.id + '" class="control control-' + control.type + '"></div>').find('#control-' + $scene + '-' + control.id)[0];
								if (jQuery.browser.mobile) {
									$('#control-' + $scene + '-' + control.id).addClass('mobile-slider');
								}
								$('#control-' + $scene + '-' + control.id).slider({
									min : parseInt(control.min),
									max : parseInt(control.max),
									step : parseInt(control.step),
									value : parseInt(control.value),
									slide : function ($event, $ui) {
										control.object.value = $ui.value;
										_self.updated.dispatch(control);
										if (control.text !== undefined && optionData.show_value_on_label !== undefined) {
											$('label[for="control-' + $scene + '-' + control.id + '"]').html('<p class="label-slider-key">' + control.text + '</p><p class="label-slider-value">' + control.object.value + control.unit + '</p>');
										}
									}
								});
								if ($scene === 'video' || $scene === 'transforms' || $scene === 'animations') {
									$('#control-' + $scene + '-' + control.id).bind('slidestart', function (event, ui) {
										_self.updated.dispatch({
											type : 'sliderdown'
										});
									});
									$('#control-' + $scene + '-' + control.id).bind('slidestop', function (event, ui) {
										_self.updated.dispatch({
											type : 'sliderup',
											value : ui.value,
											id : control.id
										});
									});
								}
							}
							if (control.text !== undefined && optionData.show_value_on_label == undefined) {
								$('#control-' + $scene + '-' + control.id).before('<label for="control-' + $scene + '-' + control.id + '">' + control.text + '</label>');
							}
							if (control.text !== undefined && optionData.show_value_on_label !== undefined) {
								var unit = '';
								if (control.unit !== undefined) {
									unit = optionData.unit;
								}
								$('#control-' + $scene + '-' + control.id).before('<label for="control-' + $scene + '-' + control.id + '"><p class="label-slider-key">' + control.text + '</p><p class="label-slider-value">' + control.value + control.unit + '</p></label>');
							}
						}
						if (control.type === 'checkbox') {
							control.state = optionData.state;
							control.object = $('#overlay-' + $scene).append('<input type="checkbox" id="control-' + i + '" class="control control-' + $scene + '-' + control.type + '" />').find('#control-' + $scene + '-' + i)[0];
							if (control.state) {
								$('#control-' + i).attr({
									checked : 'checked'
								});
							}
						}
						if (control.type === 'dropdown') {
							control.active = optionData.active;
							control.options = optionData.options;
							control.object = $('#overlay-' + $scene).append('<select id="control-' + $scene + '-' + i + '" class="control control-' + control.type + '" />').find('#control-' + $scene + '-' + i)[0];
							for (var j = 0; j < control.options.length; j++) {
								$('#control-' + $scene + '-' + i).append('<option id="control-' + $scene + '-' + i + '-' + control.options[j] + '"value="' + control.options[j] + '">' + control.options[j] + '</option>');
								if (control.active === control.options[j]) {
									$('#control-' + $scene + '-' + i + '-' + control.options[i]).attr({
										selected : 'selected'
									});
								}
							}
						}
						if (control.type === 'button') {
							control.state = optionData.state;
							control.text = optionData.text;
							control.object = $('#overlay-' + $scene).append('<div id="control-' + $scene + '-' + control.id + '" class="control control-' + control.type + '">' + control.text + '</div>').find('#control-' + $scene + '-' + control.id)[0];
							if (_model.data.controller == 'web-storage') {
								if (control.text.length > 15) {}
								
							}
							$(control.object).click(function () {
								_self.updated.dispatch(control);
								if ($('#control-' + $scene + '-' + control.id).hasClass('active')) {
									$('#control-' + $scene + '-' + control.id).removeClass('active');
								} else {
									$('#control-' + $scene + '-' + control.id).addClass('active');
								}
							});
							if (_model.data.controller === 'web-storage') {
								$(control.object).mouseover(function () {});
								if (control.text == 'Blockout!' || control.text == 'Tell me a Story' || control.text == 'Picasso') {
									$('#control-' + $scene + '-' + control.id).addClass('line-height');
								}
							}
							if (control.state === 'true') {
								$(control.object).addClass('active');
							}
						}
						if (control.type === 'color') {
							control.value = optionData.value;
							if (!Modernizr.inputtypes.color) {
								var colorpicker_html = '<input type="text" id="control-' + $scene + '-' + control.id + '" class="control control-' + control.type + '" value="' + control.value + '" readonly />';
								if (optionData.text !== undefined) {
									control.text = optionData.text;
									control.label = $('#overlay-' + $scene).append('<label for="control-' + control.id + '">' + control.text + '</label>');
								}
								if (_model.data.controller === 'gradients') {
									control.object = $('#gradient-pickers').append(colorpicker_html).find('#control-' + $scene + '-' + control.id)[0];
								} else {
									control.object = $('#overlay-' + $scene).append(colorpicker_html).find('#control-' + $scene + '-' + control.id)[0];
								}
								var colorpicker = new jscolor.color(document.getElementById('control-' + $scene + '-' + control.id), {})
									colorpicker.VALUE_UPDATED.add(function (colorValue) {
										_self.updated.dispatch({
											"type" : "color",
											"id" : control.id,
											"object" : {
												"value" : colorValue
											}
										});
									});
							} else {
								var colorpicker_html = '<input type="color" id="control-' + $scene + '-' + control.id + '" value="' + control.value + '" />';
								control.object = $('#overlay-' + $scene).append(colorpicker_html).find('#control-' + $scene + '-' + control.id)[0];
								control.object.addEventListener('change', function () {
									_self.updated.dispatch(control);
								}, false);
								if ($('.gradients #gradient-pickers').length) {
									$(control.object).appendTo('#gradient-pickers');
								}
							}
						}
						if (control.type === 'draggable') {
							control.src = optionData.src;
							control.object = $('#overlay-' + $scene).append('<img id="control-' + $scene + '-' + control.id + '" class="control control-' + $scene + '-' + control.type + '" src="' + BASEURL + control.src + '" alt="' + control.text + '"/>').find('#control-' + $scene + '-' + control.id)[0];
							$('#control-' + $scene + '-' + control.id).attr({
								draggable : 'true'
							}).load(function () {
								_self.loaded.dispatch('control-' + $scene + '-' + control.id);
							});
						}
						if (control.type === 'text') {
							control.value = optionData.value;
							if (optionData.subtype !== undefined) {
								control.subtype = optionData.subtype;
								control.object = $('#overlay-' + $scene).append('<input name="' + control.id + '" placeholder=" ' + control.value + '" type="' + control.subtype + '" id="control-' + $scene + '-' + i + '" class="control control-' + control.subtype + '" />').find('#control-' + $scene + '-' + i)[0];
							} else {
								control.object = $('#overlay-' + $scene).append('<input name="' + control.id + '" placeholder=" ' + control.value + '" id="control-' + $scene + '-' + i + '" class="control control-' + control.type + '" />').find('#control-' + $scene + '-' + i)[0];
							}
						}
						if (control.type === 'submit') {
							control.object = $('#overlay-' + $scene).append('<div id="' + control.id + '" class="control control-' + control.type + '"></div>').find('#' + control.id)[0];
							$(control.object).click(function () {
								var noun1 = $('input:[name=noun1]').val();
								var plural_noun = $('input:[name=plural-noun]').val();
								var noun2 = $('input:[name=noun2]').val();
								var verb = $('input:[name=verb-past]').val();
								var adverb = $('input:[name=adverb]').val();
								var o = {};
								o.plural_noun = plural_noun;
								o.noun1 = noun1;
								o.noun2 = noun2;
								o.verb = verb;
								o.adverb = adverb;
								_self.updated.dispatch(o);
							});
						}
						_controls[_controls.length] = control;
					})(i);
				}
			}
		}
		if (_model.data.controller === 'web-storage') {
			_updateStorageIcons();
		};
	}
	function _updateStorageIcons() {
		var divs = [];
		if (_model.store.checkAchievementStatus('fonts')) {
			divs.push('#control-web-storage-fonts');
		}
		if (_model.store.checkAchievementStatus('animations')) {
			divs.push('#control-web-storage-animations');
		}
		if (_model.store.checkAchievementStatus('gradients')) {
			divs.push('#control-web-storage-gradients');
		}
		if (_model.store.checkAchievementStatus('shadows')) {
			divs.push('#control-web-storage-shadows');
		}
		if (_model.store.checkAchievementStatus('transforms')) {
			divs.push('#control-web-storage-transforms');
		}
		if (_model.store.checkAchievementStatus('canvas')) {
			divs.push('#control-web-storage-canvas');
		}
		if (_model.store.checkAchievementStatus('forms')) {
			divs.push('#control-web-storage-forms');
		}
		if (_model.store.checkAchievementStatus('video')) {
			divs.push('#control-web-storage-video');
		}
		if (_model.store.hasViewedFeature('html5-web-storage')) {
			divs.push('#control-web-storage-web-storage');
		}
		for (var i = 0; i < divs.length; i++) {
			if ($(divs[i]).index() % 2 != 0) {
				$(divs[i]).css({
					backgroundImage : 'url( ' + BASEURL + 'images/assets/png/overlay/storage_checked.png ), url( ' + BASEURL + 'images/assets/png/overlay/odd-bg2.png )'
				});
				if ($('body').hasClass('browser-ipad')) {
					$(divs[i]).css({
						backgroundPosition : '4px 4px, 0 0'
					});
				} else {
					$(divs[i]).css({
						backgroundPosition : '13px 10px, 0 0'
					});
				}
				$(divs[i]).css({
					backgroundRepeat : 'no-repeat, repeat-x'
				});
			} else {
				$(divs[i]).css({
					backgroundImage : 'url( ' + BASEURL + 'images/assets/png/overlay/storage_checked.png )'
				});
			}
		};
	};
	this.init = function init($model) {
		_self._model = $model;
	};
	(function () {
		_model = $model;
	})();
	return ExpressiveWeb.create(_self, {
		register : true,
		extend : 'Controller'
	});
};
function PeopleController($model) {
	var _self = this;
	var _model;
	var _counter = 0;
	var _outCounter = 0;
	var _people = [];
	var _hash = {};
	var _petrillo = false;
	var _koch = false;
	this.name = "PeopleController";
	this.animateInCompleted = new signals.Signal();
	this.addPeople = function addPeople() {
		if (_model.data.people) {
			$('<div id="people"></div>').appendTo($('.scene'));
			for (var i = 0; i < _model.data.people.length; i++) {
				var person = new SpritesheetAnimator($('<div id="' + _model.data.people[i].name + '" class="person"></div>')).init({
						top : _model.data.people[i].y,
						image : _model.data.people[i].image,
						speed : _model.data.people[i].speed,
						imageWidth : _model.data.people[i].imageWidth,
						imageHeight : _model.data.people[i].imageHeight,
						static : _model.data.people[i].static,
						divWidth : _model.data.people[i].divWidth,
						divHeight : _model.data.people[i].divHeight,
						pause : _model.data.people[i].pause,
						offset : _model.data.people[i].offset
					});
				person.div.attr('style', 'left: ' + _model.data.people[i].x + 'px; top: ' + (-_model.data.people[i].divHeight) + 'px; width: ' + _model.data.people[i].divWidth + 'px; height: ' + _model.data.people[i].divHeight + 'px; z-index: ' + _model.data.people[i].z + ';');
				person.div.css({
					backgroundImage : 'url("' + BASEURL + _model.data.people[i].image + '")',
					backgroundPositionX : '0',
					backgroundPositionY : '0'
				});
				person.div.appendTo($('#people'));
				person.animateOutCompleted.add(_updateOutCount);
				_people.push(person);
				_hash[_model.data.people[i].name] = person;
			};
			_animateIn();
		}
	};
	this.updateValue = function updateValue($control) {
		_hideAllAudioPeople();
		for (var i = 0; i < _people.length; i++) {
			if ($(_people[i].div).attr('id') == $control.id) {
				if (_people[i].isPlaying) {
					_people[i].div.css('visibility', 'visible');
					_hash['s_' + $(_people[i].div).attr('id')].div.css('visibility', 'visible');
					_hash['t_' + $(_people[i].div).attr('id')].div.css('visibility', 'visible');
					return;
				}
				_people[i].div.css('visibility', 'visible');
				_people[i].play();
				_hash['s_' + $(_people[i].div).attr('id')].div.css('visibility', 'visible');
				_hash['s_' + $(_people[i].div).attr('id')].play();
				_hash['t_' + $(_people[i].div).attr('id')].div.css('visibility', 'visible');
				_hash['t_' + $(_people[i].div).attr('id')].play();
				return;
			}
		};
	};
	this.removePeople = function removePeople() {
		if (_people.length) {
			_animateOut();
		}
	};
	this.audioEnded = function audioEnded($name) {
		for (var i = 0; i < _people.length; i++) {
			if ($(_people[i].div).attr('id') == $name) {
				_people[i].stop();
				_hash['s_' + $(_people[i].div).attr('id')].stop();
				_hash['t_' + $(_people[i].div).attr('id')].stop();
				return;
			}
		};
	};
	this.boom = function boom() {
		for (var i = 0; i < _people.length; i++) {
			_people[i].play();
		}
	};
	function _animateIn() {
		if (_counter < _people.length) {
			_people[_counter].animateIn();
			_counter++;
			setTimeout(_animateIn, 150);
		} else {
			_counter = 0;
			_self.animateInCompleted.dispatch();
		}
	};
	function _animateOut() {
		if (_counter < _people.length) {
			_people[_counter].animateOut();
			_counter++;
			setTimeout(_animateOut, 150);
		} else {
			_counter = 0;
		}
	};
	function _hideAllAudioPeople() {
		for (var i = 0; i < _people.length; i++) {
			if (_isSpecialCase($(_people[i].div).attr('id'))) {
				_people[i].div.css('visibility', 'hidden');
			}
		}
	};
	function _isSpecialCase($id) {
		var b = false;
		switch ($id) {
		case 'boo':
		case 'cheer':
		case 'clap':
		case 'laugh':
		case 's_boo':
		case 's_cheer':
		case 's_clap':
		case 's_laugh':
		case 't_boo':
		case 't_cheer':
		case 't_clap':
		case 't_laugh':
			b = true;
			break;
		}
		return b;
	};
	function _updateOutCount() {
		_outCounter++;
		if (_outCounter == _people.length) {
			$('#people').remove();
			_people = [];
			_hash = {};
			_counter = 0;
			_outCounter = 0;
		}
	};
	this.init = function init($model) {
		_self._model = $model;
	};
	(function () {
		_model = $model;
	})();
	return ExpressiveWeb.create(_self, {
		register : true,
		extend : 'Controller'
	});
};
