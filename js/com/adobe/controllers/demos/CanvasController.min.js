
function CanvasController($model)
{var _self=this;var _model;var _demo={};var COS=Math.cos(0.46365);var SIN=Math.sin(0.46365);var LEFT_ARROW=37;var UP_ARROW=38;var RIGHT_ARROW=39;var DOWN_ARROW=40;var MAX_PADDLE_SPD=5;var CANVAS_W=850;var CANVAS_H=450;var X_ORIGIN=540;var Y_ORIGIN=420;var BOARD_W=329;var BOARD_H=600;var GRID_W=7;var GRID_H=5;var TOP_BOARD_BUFFER=48;var BRICK_W=47;var BRICK_H=16;var PADDLE_W=80;var PADDLE_H=16;var BALL_H=16;var BALL_W=16;var gameCanvas;var gameStage;var loadFlags=[];var brick_blue_img;var brick_yellow_img;var brick_pink_img;var brick_orange_img;var brick_green_img;var paddle_img;var ball_img;var bricks=[];var brick_imgs=[];var paddle;var ball;var ready_img;var set_img;var gameover_img;var game_state="stopped";var request;var ball_start_timeout;var level=0;var patterns=[];patterns[0]=[[6,0,'R'],[4,0,'R'],[2,0,'R'],[0,0,'R'],[5,1,'O'],[3,1,'O'],[1,1,'G'],[6,2,'Y'],[4,2,'Y'],[2,2,'Y'],[0,2,'Y'],[5,3,'G'],[3,3,'G'],[1,3,'G'],[6,4,'B'],[4,4,'B'],[2,4,'B'],[0,4,'B']];patterns[1]=[[6,0,'P'],[5,0,'R'],[4,0,'O'],[3,0,'Y'],[2,0,'G'],[1,0,'B'],[0,0,'P'],[5,1,'B'],[4,1,'R'],[3,1,'O'],[2,1,'Y'],[1,1,'G'],[6,2,'P'],[5,2,'G'],[4,2,'B'],[3,2,'R'],[2,2,'O'],[1,2,'Y'],[0,2,'P'],[5,3,'Y'],[4,3,'G'],[3,3,'B'],[2,3,'R'],[1,3,'O'],[6,4,'P'],[5,4,'O'],[4,4,'Y'],[3,4,'G'],[2,4,'B'],[1,4,'R'],[0,4,'P']];patterns[2]=[[6,0,'P'],[5,0,'P'],[4,0,'P'],[3,0,'P'],[2,0,'P'],[1,0,'P'],[0,0,'P'],[6,1,'R'],[0,1,'R'],[6,2,'R'],[4,2,'B'],[2,2,'B'],[0,2,'R'],[6,3,'R'],[4,3,'B'],[2,3,'B'],[0,3,'R'],[6,4,'R'],[0,4,'R'],[6,5,'B'],[5,5,'B'],[4,5,'B'],[3,5,'P'],[2,5,'B'],[1,5,'B'],[0,5,'B']];patterns[3]=[[6,0,'R'],[4,0,'R'],[2,0,'R'],[0,0,'R'],[6,1,'Y'],[4,1,'Y'],[2,1,'Y'],[0,1,'Y'],[6,2,'B'],[4,2,'B'],[2,2,'B'],[0,2,'B'],[5,3,'G'],[3,3,'G'],[1,3,'G'],[5,4,'O'],[3,4,'O'],[1,4,'O'],[5,5,'P'],[3,5,'P'],[1,5,'P']];patterns[5]=[[6,0,'B'],[5,0,'B'],[4,0,'B'],[2,0,'B'],[1,0,'B'],[0,0,'B'],[6,1,'B'],[5,1,'Y'],[4,1,'B'],[2,1,'B'],[1,1,'Y'],[0,1,'B'],[6,2,'B'],[5,2,'Y'],[4,2,'B'],[3,2,'B'],[2,2,'B'],[1,2,'Y'],[0,2,'B'],[6,3,'B'],[5,3,'P'],[4,3,'B'],[2,3,'B'],[1,3,'P'],[0,3,'B'],[6,4,'B'],[5,4,'Y'],[4,4,'B'],[2,4,'B'],[1,4,'Y'],[0,4,'B'],[6,5,'B'],[5,5,'B'],[4,5,'B'],[2,5,'B'],[1,5,'B'],[0,5,'B']];var points_per_brick=75;var score=0;var balls=3;this.name="CanvasController";this.init=function()
{var css_file='css/demos/'+_model.data.controller+'.css';if(!$('#style-'+_model.data.controller).length)
{$.ajax({url:css_file,success:function($css)
{$('<style id="style-'+_model.data.controller+'">'+$css+'</style>').appendTo('head');cssLoaded();}});}
else
{cssLoaded();}}
function cssLoaded()
{if(!_model.checkFeatureCompatibility())
{_model.featureNotSupported(['HTML5 Canvas']);return;}
_demo.canvas=$('#demo-html').append('<canvas id="canvas-game">').find('#canvas-game')[0];$('#demo-html').append('<div id="canvas-overlay-area"></div>');$('#canvas-game').css({position:'absolute',left:115,top:15,opacity:0}).animate({opacity:1},500);balls=$('#asset-balls .cube').length;points=0;loadAssets();updateBallsDisplay();updateScore();};this.stop=function()
{_demo={};$('#canvas-game').animate({opacity:0},500,_self.clearDemo());window.onkeydown=null;window.onkeyup=null;};this.updateValue=function()
{};this.clearDemo=function clearDemo(){$('#demo-html').html('');};function loadAssets()
{brick_imgs.push(createImgAsset("brick_purple_img",BASEURL+"images/assets/breakout/brick_purple_2.png"));brick_imgs.push(createImgAsset("brick_red_img",BASEURL+"images/assets/breakout/brick_red_2.png"));brick_imgs.push(createImgAsset("brick_blue_img",BASEURL+"images/assets/breakout/brick_blue_2.png"));brick_imgs.push(createImgAsset("brick_orange_img",BASEURL+"images/assets/breakout/brick_orange_2.png"));brick_imgs.push(createImgAsset("brick_yellow_img",BASEURL+"images/assets/breakout/brick_yellow_2.png"));brick_imgs.push(createImgAsset("brick_green_img",BASEURL+"images/assets/breakout/brick_green_2.png"));ball_img=createImgAsset("ball",BASEURL+"images/assets/breakout/ball_2.png");paddle_img=createImgAsset("paddle",BASEURL+"images/assets/breakout/paddle_2.png");ready_img=createImgAsset("ready",BASEURL+"images/assets/breakout/ready.png");set_img=createImgAsset("set",BASEURL+"images/assets/breakout/set.png");gameover_img=createImgAsset("set",BASEURL+"images/assets/breakout/gameover.png");}
function createImgAsset($id,$src)
{var img=new Image();loadFlags[$id]=0;img.onload=function(){onAssetLoaded($id);};img.src=$src;return img;}
function onAssetLoaded($asset_id)
{loadFlags[$asset_id]=1;for(flag in loadFlags)
{if(!loadFlags[flag])
{return;}}
breakout_init();}
function breakout_init()
{gameCanvas=document.getElementById('canvas-game');gameCanvas.width=CANVAS_W;gameCanvas.height=CANVAS_H;gameStage=document.getElementById('canvas-game').getContext('2d');paddle=new Paddle(paddle_img,150);initBricks();ball=new Ball(ball_img,128,413);startGameLoop();showReady();$('canvas').click(function()
{if(game_state=='gameover')
{balls=3;level=0;initBricks();$('#asset-balls .cube').show();updateScore();updateBallsDisplay('RESTART');showReady();}});}
function Brick($img,$x,$y)
{this.img=$img;this.x=$x;this.y=$y;this.yOffset=0-$img.height;this.xOffset=-12;this.active=true;}
function Paddle($img,$x)
{this.img=$img;this.x=$x;this.y=16;this.isDragging=false;this.yOffset=0-$img.height;this.xOffset=-12;this.speed=0;}
function Ball($img,$x,$y)
{this.img=$img;this.initX=$x;this.initY=$y;this.x=$x;this.y=$y;this.xOffset=-12;this.yOffset=0-$img.height;this.xSpeed=0;this.ySpeed=0;}
function drawBoardOutline()
{gameStage.moveTo(getScreenX(0,0),getScreenY(0,0));gameStage.lineTo(getScreenX(BOARD_W,0),getScreenY(BOARD_W,0));gameStage.lineTo(getScreenX(BOARD_W,BOARD_H),getScreenY(BOARD_W,BOARD_H));gameStage.lineTo(getScreenX(0,BOARD_H),getScreenY(0,BOARD_H));gameStage.lineTo(getScreenX(0,0),getScreenY(0,0));gameStage.strokeStyle="#999";gameStage.lineWidth=1;gameStage.stroke();}
function initBricks()
{bricks=[];var pattern=patterns[level];for(var i=0;i<pattern.length;i++)
{var image=getBrickImage(pattern[i]);bricks.push(new Brick(image,pattern[i][0]*BRICK_W,BOARD_H-((pattern[i][1]*BRICK_H)+TOP_BOARD_BUFFER)));}}
function getBrickImage($pattern)
{var return_value=brick_imgs[Math.floor(Math.random()*brick_imgs.length)];var brick_colors=['P','R','B','O','Y','G'];if($pattern[2]!==undefined)
{for(var i=0;i<brick_colors.length;i++)
{if($pattern[2]===brick_colors[i])
{return_value=brick_imgs[i];break;}}}
return return_value;}
function checkBrickCollision($ball)
{var ball_x1=$ball.x;var ball_x2=$ball.x+BALL_W;var ball_y1=$ball.y;var ball_y2=$ball.y+BALL_H;var brick;var brick_x2;var brick_y2;for(var i=0;i<bricks.length;i++)
{brick=bricks[i];if(brick.active)
{brick_x2=brick.x+BRICK_W;brick_y2=brick.y+BRICK_H;if(ball_x2>brick.x&&ball_x1<brick_x2&&ball_y2>brick.y&&ball_y1<brick_y2)
{hitBrick();brick.active=false;if($ball.ySpeed>0&&$ball.y-$ball.ySpeed<brick.y)
{$ball.ySpeed*=-1;}
else if($ball.ySpeed<0&&$ball.y-$ball.ySpeed>brick.y+BRICK_H)
{$ball.ySpeed*=-1;}
else if($ball.xSpeed>0&&$ball.x-$ball.xSpeed<brick.x)
{$ball.xSpeed*=-1;}
else if($ball.xSpeed<0&&$ball.x-$ball.xSpeed>brick.x+BRICK_W)
{$ball.xSpeed*=-1;}}}}}
function hitBrick()
{score+=points_per_brick;updateScore();}
function checkPaddleCollision($ball,$paddle)
{var ball_x1=$ball.x;var ball_x2=$ball.x+BALL_W;var ball_y1=$ball.y;var ball_y2=$ball.y+BALL_H;var paddle_x2=paddle.x+PADDLE_W;var paddle_y2=paddle.y+PADDLE_H;if(ball_x2>paddle.x&&ball_x1<paddle_x2&&ball_y2>paddle.y&&ball_y1<paddle_y2)
{ball.y=paddle.y+PADDLE_H;ball.ySpeed*=-1;var dx=ball.x-(paddle.x+(PADDLE_W*.5));ball.xSpeed=dx*.15;var bricksCleared=true;for(var i=0;i<bricks.length;i++)
{if(bricks[i].active)
{bricksCleared=false;break;}}
if(bricksCleared)
{if(level<patterns.length)
{level++;if(level!==0)
{_model.checkMasterAchievement(_model.data.controller);}
if(level==patterns.length)
{level=0;}}
initBricks();}}}
function checkBoundsCollision($ball)
{if(ball.x>BOARD_W-BALL_W)
{ball.x=BOARD_W-BALL_W;ball.xSpeed*=-1;}
if(ball.x<0)
{ball.x=0;ball.xSpeed*=-1;}
if(ball.y>BOARD_H-BALL_H)
{ball.y=BOARD_H-BALL_H;ball.ySpeed*=-1;}
if(ball.y<-50)
{loseBall();}}
function loseBall()
{if(balls>0)
{balls--;updateBallsDisplay();ball.x=ball.initX;ball.y=ball.initY;ball.xSpeed=0;ball.ySpeed=0;showReady();}
else
{game_state="gameover";score=0;}}
window.cancelRequestAnimFrame=(function()
{return window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||clearTimeout})();window.requestAnimFrame=(function()
{return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(callback,element)
{return window.setTimeout(callback,1000/60);};})();function showReady()
{game_state="ready";ball_start_timeout=setTimeout(showSet,1500);}
function showSet()
{game_state="set";ball_start_timeout=setTimeout(startBall,1500);}
function startBall()
{game_state="playing";ball.xSpeed=Math.floor(-3+(Math.random()*6));ball.ySpeed=-5;if(jQuery.browser.firefox||jQuery.browser.msie)
{ball.ySpeed=-4;}
if(jQuery.browser.mobile)
{ball.ySpeed=-15;}}
function startGameLoop()
{gameCanvas.onmousedown=onMouseDown;gameCanvas.onmouseup=onMouseUp;window.onkeydown=onKeyDown;window.onkeyup=onKeyUp;try
{gameCanvas.addEventListener("touchstart",onTouchStart);gameCanvas.addEventListener("touchend",onTouchEnd);}
catch($e){}
gameLoop();}
function gameLoop()
{update();request=requestAnimFrame(gameLoop,gameCanvas);}
function stopGameLoop()
{cancelRequestAnimFrame(request);}
function update()
{gameStage.clearRect(0,0,gameCanvas.width,gameCanvas.height);if(game_state=="ready")gameStage.drawImage(ready_img,271,120);if(game_state=="set")gameStage.drawImage(set_img,271,120);if(game_state=="gameover")gameStage.drawImage(gameover_img,271,120);if(paddle.isDragging)
{if(mouseX&&oldMouseX)
{var dx=mouseX-oldMouseX;paddle.x+=dx;oldMouseX=mouseX;}}
paddle.x+=paddle.speed;paddle.x=Math.min(paddle.x,BOARD_W-PADDLE_W);paddle.x=Math.max(paddle.x,0);ball.x+=ball.xSpeed;ball.y+=ball.ySpeed;checkPaddleCollision(ball,paddle);checkBoundsCollision(ball);checkBrickCollision(ball);for(var i=0;i<bricks.length;i++){if(bricks[i].active)renderObject(bricks[i]);}
renderObject(ball);renderObject(paddle);}
function getScreenX($x,$y)
{var x=(($x-$y)*COS)+X_ORIGIN;return x;}
function getScreenY($x,$y)
{var y=Y_ORIGIN-(($x+$y)*SIN);return y;}
function renderObject($obj)
{var x=getScreenX($obj.x,$obj.y)+$obj.xOffset;var y=getScreenY($obj.x,$obj.y)+$obj.yOffset;try
{gameStage.drawImage($obj.img,x,y);}
catch($error)
{}}
function updateScore()
{var digits=score.toString().split('');$('[id^=asset-digit-]').each(function()
{var id=Number($(this).attr('id').replace('asset-digit-',''));var offset=$('[id^=asset-digit-]').length-digits.length;if(id>digits.length-1)
{scoreDigitUpdate($('[id^=asset-digit-]').length-1-id,10);}
else
{scoreDigitUpdate(offset+id,Number(digits[id]));}});}
function scoreDigitUpdate($index,$value)
{var cubes=_model.data.numbers[$value].data.split('.');var cube_data=[];for(var i=0;i<cubes.length;i++)
{cube_data.push(cubes[i]);}
scoreDigitAnimate($index,cube_data,0);}
function scoreDigitAnimate($digit_index,$cube_data,$cube_index)
{if($cube_index<$cube_data.length)
{if($cube_data[$cube_index]==='0')
{$('#asset-digit-'+$digit_index+' .cube:eq('+$cube_index+')').hide();}
else
{$('#asset-digit-'+$digit_index+' .cube:eq('+$cube_index+')').show();}
setTimeout(function(){scoreDigitAnimate($digit_index,$cube_data,$cube_index+1);},10);}}
function updateBallsDisplay($restart)
{if($restart===undefined)
{if($('#asset-balls .cube').length>balls)
{$('#balls-'+balls).hide();}}
if($restart==='RESTART')
{balls=4;$('#asset-balls .cube').show();}}
function onMouseDown($evt)
{paddle.isDragging=true;oldMouseX=$evt.clientX;mouseX=$evt.clientX;gameCanvas.onmousemove=onMouseMove;}
function onMouseUp($evt)
{paddle.isDragging=false;gameCanvas.onmousemove=null;}
function onMouseMove($evt)
{mouseX=$evt.clientX;}
function onKeyDown($evt)
{$evt.preventDefault();if($evt.keyCode==LEFT_ARROW||$evt.keyCode==DOWN_ARROW)
{paddle.speed=-MAX_PADDLE_SPD;}
if($evt.keyCode==RIGHT_ARROW||$evt.keyCode==UP_ARROW)
{paddle.speed=MAX_PADDLE_SPD;}}
function onKeyUp($evt)
{$evt.preventDefault();if(($evt.keyCode==LEFT_ARROW||$evt.keyCode==DOWN_ARROW)&&paddle.speed<0)
{paddle.speed=0;}
if(($evt.keyCode==RIGHT_ARROW||$evt.keyCode==UP_ARROW)&&paddle.speed>0)
{paddle.speed=0;}}
function onTouchStart($evt)
{$evt.preventDefault();paddle.isDragging=true;oldMouseX=$evt.touches[0].pageX;mouseX=$evt.touches[0].pageX;gameCanvas.addEventListener("touchmove",onTouchMove);}
function onTouchEnd($evt)
{paddle.isDragging=false;gameCanvas.removeEventListener("touchmove",onTouchMove);}
function onTouchMove($evt)
{mouseX=$evt.touches[0].pageX;}
(function(){_model=$model;})();return ExpressiveWeb.create(_self,{register:true,extend:'Controller'});};